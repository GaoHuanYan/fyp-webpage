{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js\",\n  _s = $RefreshSig$();\n// // // import React, { useState, useEffect } from 'react';\n// // // import { useParams } from 'react-router-dom';\n// // // import { Line } from 'react-chartjs-2';\n// // // import {\n// // //   Chart as ChartJS,\n// // //   CategoryScale,\n// // //   LinearScale,\n// // //   PointElement,\n// // //   LineElement,\n// // //   Title,\n// // //   Tooltip,\n// // //   Legend,\n// // // } from 'chart.js';\n\n// // // ChartJS.register(\n// // //   CategoryScale,\n// // //   LinearScale,\n// // //   PointElement,\n// // //   LineElement,\n// // //   Title,\n// // //   Tooltip,\n// // //   Legend\n// // // );\n\n// // // function StockDetails() {\n// // //   const { ticker } = useParams();\n// // //   const [stockData, setStockData] = useState(null);\n// // //   const [news, setNews] = useState(null);\n// // //   const [prediction, setPrediction] = useState(null);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [error, setError] = useState(null);\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       setLoading(true);\n// // //       setError(null);\n// // //       try {\n// // //         const [detailsRes, newsRes, predictionRes] = await Promise.all([\n// // //           fetch(`/api/stocks/${ticker}`),\n// // //           fetch(`/api/stocks/${ticker}/news`),\n// // //           fetch(`/api/predict/${ticker}`),\n// // //         ]);\n\n// // //         if (!detailsRes.ok || !newsRes.ok || !predictionRes.ok) {\n// // //           throw new Error('获取数据失败');\n// // //         }\n\n// // //         const detailsData = await detailsRes.json();\n// // //         const newsData = await newsRes.json();\n// // //         const predictionData = await predictionRes.json();\n\n// // //         setStockData(detailsData);\n// // //         setNews(newsData);\n// // //         setPrediction(predictionData);\n// // //       } catch (err) {\n// // //         setError(err.message);\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     };\n\n// // //     fetchData();\n// // //   }, [ticker]);\n\n// // //   if (loading) return <div className=\"loading\">正在加载股票数据...</div>;\n// // //   if (error) return <div className=\"error\">错误: {error}</div>;\n// // //   if (!stockData) return null;\n\n// // //   const chartData = {\n// // //     labels: stockData.map(data => data.date),\n// // //     datasets: [\n// // //       {\n// // //         label: `${ticker} 收盘价`,\n// // //         data: stockData.map(data => data.close),\n// // //         borderColor: 'rgb(75, 192, 192)',\n// // //         backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// // //       },\n// // //     ],\n// // //   };\n\n// // //   const chartOptions = {\n// // //     responsive: true,\n// // //     plugins: {\n// // //       legend: {\n// // //         position: 'top',\n// // //       },\n// // //       title: {\n// // //         display: true,\n// // //         text: `${ticker} 股价走势`,\n// // //       },\n// // //       tooltip: {\n// // //         callbacks: {\n// // //           label: function (context) {\n// // //             const index = context.dataIndex;\n// // //             const dataPoint = stockData[index];\n// // //             if (!dataPoint) return '';\n// // //             return [\n// // //               `收盘: ${dataPoint.close.toFixed(2)}`,\n// // //               `开盘: ${dataPoint.open.toFixed(2)}`,\n// // //               `最高: ${dataPoint.high.toFixed(2)}`,\n// // //               `最低: ${dataPoint.low.toFixed(2)}`,\n// // //             ];\n// // //           },\n// // //         },\n// // //       },\n// // //     },\n// // //   };\n\n// // //   return (\n// // //     <div className=\"stock-details-container\">\n// // //       <h2>{ticker} - 股票详情</h2>\n\n// // //       <section className=\"chart-prediction-section\">\n// // //         <div className=\"chart-container\">\n// // //           <Line options={chartOptions} data={chartData} />\n// // //         </div>\n\n// // //         {prediction && (\n// // //           <div className=\"prediction-container\">\n// // //             <h3>模型预测明日收盘价</h3>\n// // //             <p className=\"prediction-price\">${prediction.predicted_close}</p>\n// // //             <small>（基于简单线性回归模型）</small>\n// // //           </div>\n// // //         )}\n// // //       </section>\n\n// // //       <section className=\"news-section\">\n// // //         {news && (\n// // //           <>\n// // //             <div className=\"news-list-container\">\n// // //               <h3>最新资讯</h3>\n// // //               {news.news_items.map(item => (\n// // //                 <div key={item.id} className=\"news-item\">\n// // //                   <p className=\"news-title\">{item.title}</p>\n// // //                   <p className=\"news-date\">{item.date}</p>\n// // //                   <p className=\"news-summary\">{item.summary}</p>\n// // //                 </div>\n// // //               ))}\n// // //             </div>\n// // //             <div className=\"news-summary-container\">\n// // //               <h3>近期资讯总结</h3>\n// // //               <p>{news.summary}</p>\n// // //             </div>\n// // //           </>\n// // //         )}\n// // //       </section>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default StockDetails;\n\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// // function StockDetails() {\n// //   const { ticker } = useParams();\n// //   const [data, setData] = useState(null);\n// //   const [error, setError] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     // 只请求后端存在的唯一数据接口 /api/stocks/<ticker>\n// //     fetch(`/api/stocks/${ticker}`)\n// //       .then(res => {\n// //         if (!res.ok) {\n// //           // 如果服务器返回了错误状态 (如 404, 500), 先抛出错误\n// //           throw new Error(`服务器错误: ${res.status}`);\n// //         }\n// //         return res.json();\n// //       })\n// //       .then(fetchedData => {\n// //         // 检查后端返回的数据里是否包含我们自定义的错误信息\n// //         if (fetchedData.error) {\n// //           throw new Error(fetchedData.error);\n// //         }\n// //         setData(fetchedData);\n// //         setLoading(false);\n// //       })\n// //       .catch(err => {\n// //         // 捕获所有类型的错误 (网络错误, 解析错误, 后端返回的错误)\n// //         console.error(`获取股票详情失败 (${ticker}):`, err);\n// //         setError(`获取数据失败: ${err.message}`);\n// //         setLoading(false);\n// //       });\n// //   }, [ticker]); // 每当 ticker 变化时，重新获取数据\n\n// //   if (loading) {\n// //     return <div>正在为 {ticker} 加载数据...</div>;\n// //   }\n\n// //   if (error) {\n// //     return <div>错误: {error}</div>;\n// //   }\n\n// //   if (!data || !data.history) {\n// //     return <div>没有找到 {ticker} 的历史数据。</div>;\n// //   }\n\n// //   return (\n// //     <div style={{ width: '90%', height: '500px', margin: 'auto' }}>\n// //       <h2>{data.name} ({data.ticker}) 历史价格 (1年)</h2>\n// //       <ResponsiveContainer>\n// //         <LineChart\n// //           data={data.history}\n// //           margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n// //         >\n// //           <CartesianGrid strokeDasharray=\"3 3\" />\n// //           <XAxis dataKey=\"Date\" />\n// //           <YAxis domain={['auto', 'auto']} />\n// //           <Tooltip />\n// //           <Legend />\n// //           <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" name=\"收盘价\" />\n// //         </LineChart>\n// //       </ResponsiveContainer>\n// //     </div>\n// //   );\n// // }\n\n// // export default StockDetails;\n\n// // frontend/src/components/StockDetails.js (最终版)\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Line } from 'react-chartjs-2';\n// // 1. 引入 Chart.js 的必要组件，这是标准做法\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from 'chart.js';\n\n// // 2. 注册这些组件\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// function StockDetails() {\n//     const { ticker } = useParams();\n//     const [stockData, setStockData] = useState(null);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n\n//     // 3. 新增一个专门用于图表的状态\n//     const [chartData, setChartData] = useState(null);\n\n//     useEffect(() => {\n//         setLoading(true);\n//         fetch(`/api/stocks/${ticker}`)\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error(`服务器错误: ${response.status}`);\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => {\n//                 if (data.error) {\n//                     throw new Error(data.error);\n//                 }\n//                 setStockData(data);\n\n//                 // 4. --- 这是核心改动：转换数据 ---\n//                 // 确认我们有历史数据\n//                 if (data.history && data.history.length > 0) {\n//                     // 准备图表数据\n//                     const newChartData = {\n//                         labels: data.history.map(item => item.date), // X轴：所有日期\n//                         datasets: [\n//                             {\n//                                 label: '收盘价', // 图例标签\n//                                 data: data.history.map(item => item.close), // Y轴：所有收盘价\n//                                 borderColor: 'rgb(75, 192, 192)',\n//                                 tension: 0.1\n//                             }\n//                         ]\n//                     };\n//                     setChartData(newChartData); // 设置格式化好的图表数据\n//                 }\n//             })\n//             .catch(err => {\n//                 console.error(`获取股票详情失败 (${ticker}):`, err);\n//                 setError(`获取数据失败: ${err.message}`);\n//             })\n//             .finally(() => {\n//                 setLoading(false);\n//             });\n//     }, [ticker]);\n\n//     if (loading) {\n//         return <div>正在加载 {ticker} 的数据...</div>;\n//     }\n\n//     if (error) {\n//         return <div>错误: {error}</div>;\n//     }\n\n//     if (!stockData) {\n//         return <div>没有找到该股票的数据。</div>;\n//     }\n\n//     return (\n//         <div>\n//             <h2>{stockData.name} ({stockData.ticker}) 历史价格 (1年)</h2>\n//             <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n//                 {/* 5. 确保 chartData 准备好之后再渲染图表 */}\n//                 {chartData ? (\n//                     <Line \n//                         data={chartData} \n//                         options={{\n//                             responsive: true,\n//                             plugins: {\n//                                 legend: {\n//                                     position: 'top',\n//                                 },\n//                                 title: {\n//                                     display: true,\n//                                     text: `${ticker} 过去一年价格走势`\n//                                 }\n//                             }\n//                         }}\n//                     />\n//                 ) : (\n//                     <div>正在准备图表...</div>\n//                 )}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default StockDetails;\n\n// frontend/src/components/StockDetails.js (最终功能版：带预测图)\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale // 1. 引入TimeScale\n} from 'chart.js';\nimport { Chart } from 'react-chartjs-2'; // 引入Chart\n// 2. 引入并使用日期适配器\nimport 'chartjs-adapter-date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale // 3. 注册TimeScale\n);\n\n// 预设一些好看的颜色给不同的模型\nconst modelColors = ['rgba(255, 99, 132, 1)',\n// 红色\n'rgba(54, 162, 235, 1)',\n// 蓝色\n'rgba(255, 206, 86, 1)' // 黄色\n];\nfunction StockDetails() {\n  _s();\n  const {\n    ticker\n  } = useParams();\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/stocks/${ticker}`).then(response => response.ok ? response.json() : Promise.reject(`服务器错误: ${response.status}`)).then(data => {\n      if (data.error) return Promise.reject(data.error);\n\n      // --- 4. 核心改动：合并历史和预测数据 ---\n      const historyDataset = {\n        label: '收盘价',\n        data: data.history.map(item => ({\n          x: item.date,\n          y: item.close\n        })),\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      };\n      const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n        label: `${modelName} 预测`,\n        data: data.predictions[modelName].map(p => ({\n          x: p.date,\n          y: p.price\n        })),\n        borderColor: modelColors[index % modelColors.length],\n        backgroundColor: modelColors[index % modelColors.length],\n        showLine: false,\n        // 不画预测线\n        pointRadius: 6 // 让预测点更明显\n      }));\n      setChartData({\n        datasets: [historyDataset, ...predictionDatasets]\n      });\n    }).catch(err => {\n      console.error(`获取股票详情失败 (${ticker}):`, err);\n      setError(`获取数据失败: ${err.toString()}`);\n    }).finally(() => setLoading(false));\n  }, [ticker]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"\\u6B63\\u5728\\u52A0\\u8F7D \", ticker, \" \\u7684\\u6570\\u636E...\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"\\u9519\\u8BEF: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [ticker, \" \\u5386\\u53F2\\u4EF7\\u683C\\u4E0E\\u6A21\\u578B\\u9884\\u6D4B\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px dotted #ccc',\n        padding: '20px',\n        marginTop: '20px'\n      },\n      children: chartData ? /*#__PURE__*/_jsxDEV(Chart, {\n        type: \"line\" // 使用通用的Chart组件\n        ,\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: `${ticker} 价格走势与预测`\n            }\n          },\n          scales: {\n            // 5. 明确告诉图表X轴是时间类型\n            x: {\n              type: 'time',\n              time: {\n                unit: 'day',\n                tooltipFormat: 'yyyy-MM-dd'\n              },\n              title: {\n                display: true,\n                text: '日期'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: '价格'\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u6B63\\u5728\\u51C6\\u5907\\u56FE\\u8868...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 424,\n    columnNumber: 9\n  }, this);\n}\n_s(StockDetails, \"eqLeF9oa8Cd844Y3cx76b6lHlQE=\", false, function () {\n  return [useParams];\n});\n_c = StockDetails;\nexport default StockDetails;\nvar _c;\n$RefreshReg$(_c, \"StockDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","jsxDEV","_jsxDEV","register","modelColors","StockDetails","_s","ticker","chartData","setChartData","error","setError","loading","setLoading","fetch","then","response","ok","json","Promise","reject","status","data","historyDataset","label","history","map","item","x","date","y","close","borderColor","tension","predictionDatasets","Object","keys","predictions","modelName","index","p","price","length","backgroundColor","showLine","pointRadius","datasets","catch","err","console","toString","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","style","border","padding","marginTop","type","options","responsive","plugins","legend","position","title","display","text","scales","time","unit","tooltipFormat","_c","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js"],"sourcesContent":["// // // import React, { useState, useEffect } from 'react';\n// // // import { useParams } from 'react-router-dom';\n// // // import { Line } from 'react-chartjs-2';\n// // // import {\n// // //   Chart as ChartJS,\n// // //   CategoryScale,\n// // //   LinearScale,\n// // //   PointElement,\n// // //   LineElement,\n// // //   Title,\n// // //   Tooltip,\n// // //   Legend,\n// // // } from 'chart.js';\n\n// // // ChartJS.register(\n// // //   CategoryScale,\n// // //   LinearScale,\n// // //   PointElement,\n// // //   LineElement,\n// // //   Title,\n// // //   Tooltip,\n// // //   Legend\n// // // );\n\n// // // function StockDetails() {\n// // //   const { ticker } = useParams();\n// // //   const [stockData, setStockData] = useState(null);\n// // //   const [news, setNews] = useState(null);\n// // //   const [prediction, setPrediction] = useState(null);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [error, setError] = useState(null);\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       setLoading(true);\n// // //       setError(null);\n// // //       try {\n// // //         const [detailsRes, newsRes, predictionRes] = await Promise.all([\n// // //           fetch(`/api/stocks/${ticker}`),\n// // //           fetch(`/api/stocks/${ticker}/news`),\n// // //           fetch(`/api/predict/${ticker}`),\n// // //         ]);\n\n// // //         if (!detailsRes.ok || !newsRes.ok || !predictionRes.ok) {\n// // //           throw new Error('获取数据失败');\n// // //         }\n\n// // //         const detailsData = await detailsRes.json();\n// // //         const newsData = await newsRes.json();\n// // //         const predictionData = await predictionRes.json();\n\n// // //         setStockData(detailsData);\n// // //         setNews(newsData);\n// // //         setPrediction(predictionData);\n// // //       } catch (err) {\n// // //         setError(err.message);\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     };\n\n// // //     fetchData();\n// // //   }, [ticker]);\n\n// // //   if (loading) return <div className=\"loading\">正在加载股票数据...</div>;\n// // //   if (error) return <div className=\"error\">错误: {error}</div>;\n// // //   if (!stockData) return null;\n\n// // //   const chartData = {\n// // //     labels: stockData.map(data => data.date),\n// // //     datasets: [\n// // //       {\n// // //         label: `${ticker} 收盘价`,\n// // //         data: stockData.map(data => data.close),\n// // //         borderColor: 'rgb(75, 192, 192)',\n// // //         backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// // //       },\n// // //     ],\n// // //   };\n\n// // //   const chartOptions = {\n// // //     responsive: true,\n// // //     plugins: {\n// // //       legend: {\n// // //         position: 'top',\n// // //       },\n// // //       title: {\n// // //         display: true,\n// // //         text: `${ticker} 股价走势`,\n// // //       },\n// // //       tooltip: {\n// // //         callbacks: {\n// // //           label: function (context) {\n// // //             const index = context.dataIndex;\n// // //             const dataPoint = stockData[index];\n// // //             if (!dataPoint) return '';\n// // //             return [\n// // //               `收盘: ${dataPoint.close.toFixed(2)}`,\n// // //               `开盘: ${dataPoint.open.toFixed(2)}`,\n// // //               `最高: ${dataPoint.high.toFixed(2)}`,\n// // //               `最低: ${dataPoint.low.toFixed(2)}`,\n// // //             ];\n// // //           },\n// // //         },\n// // //       },\n// // //     },\n// // //   };\n\n// // //   return (\n// // //     <div className=\"stock-details-container\">\n// // //       <h2>{ticker} - 股票详情</h2>\n      \n// // //       <section className=\"chart-prediction-section\">\n// // //         <div className=\"chart-container\">\n// // //           <Line options={chartOptions} data={chartData} />\n// // //         </div>\n        \n// // //         {prediction && (\n// // //           <div className=\"prediction-container\">\n// // //             <h3>模型预测明日收盘价</h3>\n// // //             <p className=\"prediction-price\">${prediction.predicted_close}</p>\n// // //             <small>（基于简单线性回归模型）</small>\n// // //           </div>\n// // //         )}\n// // //       </section>\n\n// // //       <section className=\"news-section\">\n// // //         {news && (\n// // //           <>\n// // //             <div className=\"news-list-container\">\n// // //               <h3>最新资讯</h3>\n// // //               {news.news_items.map(item => (\n// // //                 <div key={item.id} className=\"news-item\">\n// // //                   <p className=\"news-title\">{item.title}</p>\n// // //                   <p className=\"news-date\">{item.date}</p>\n// // //                   <p className=\"news-summary\">{item.summary}</p>\n// // //                 </div>\n// // //               ))}\n// // //             </div>\n// // //             <div className=\"news-summary-container\">\n// // //               <h3>近期资讯总结</h3>\n// // //               <p>{news.summary}</p>\n// // //             </div>\n// // //           </>\n// // //         )}\n// // //       </section>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default StockDetails;\n\n\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// // function StockDetails() {\n// //   const { ticker } = useParams();\n// //   const [data, setData] = useState(null);\n// //   const [error, setError] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n\n// //   useEffect(() => {\n// //     // 只请求后端存在的唯一数据接口 /api/stocks/<ticker>\n// //     fetch(`/api/stocks/${ticker}`)\n// //       .then(res => {\n// //         if (!res.ok) {\n// //           // 如果服务器返回了错误状态 (如 404, 500), 先抛出错误\n// //           throw new Error(`服务器错误: ${res.status}`);\n// //         }\n// //         return res.json();\n// //       })\n// //       .then(fetchedData => {\n// //         // 检查后端返回的数据里是否包含我们自定义的错误信息\n// //         if (fetchedData.error) {\n// //           throw new Error(fetchedData.error);\n// //         }\n// //         setData(fetchedData);\n// //         setLoading(false);\n// //       })\n// //       .catch(err => {\n// //         // 捕获所有类型的错误 (网络错误, 解析错误, 后端返回的错误)\n// //         console.error(`获取股票详情失败 (${ticker}):`, err);\n// //         setError(`获取数据失败: ${err.message}`);\n// //         setLoading(false);\n// //       });\n// //   }, [ticker]); // 每当 ticker 变化时，重新获取数据\n\n// //   if (loading) {\n// //     return <div>正在为 {ticker} 加载数据...</div>;\n// //   }\n\n// //   if (error) {\n// //     return <div>错误: {error}</div>;\n// //   }\n\n// //   if (!data || !data.history) {\n// //     return <div>没有找到 {ticker} 的历史数据。</div>;\n// //   }\n\n// //   return (\n// //     <div style={{ width: '90%', height: '500px', margin: 'auto' }}>\n// //       <h2>{data.name} ({data.ticker}) 历史价格 (1年)</h2>\n// //       <ResponsiveContainer>\n// //         <LineChart\n// //           data={data.history}\n// //           margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n// //         >\n// //           <CartesianGrid strokeDasharray=\"3 3\" />\n// //           <XAxis dataKey=\"Date\" />\n// //           <YAxis domain={['auto', 'auto']} />\n// //           <Tooltip />\n// //           <Legend />\n// //           <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" name=\"收盘价\" />\n// //         </LineChart>\n// //       </ResponsiveContainer>\n// //     </div>\n// //   );\n// // }\n\n// // export default StockDetails;\n\n\n// // frontend/src/components/StockDetails.js (最终版)\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Line } from 'react-chartjs-2';\n// // 1. 引入 Chart.js 的必要组件，这是标准做法\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from 'chart.js';\n\n// // 2. 注册这些组件\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// function StockDetails() {\n//     const { ticker } = useParams();\n//     const [stockData, setStockData] = useState(null);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n    \n//     // 3. 新增一个专门用于图表的状态\n//     const [chartData, setChartData] = useState(null);\n\n//     useEffect(() => {\n//         setLoading(true);\n//         fetch(`/api/stocks/${ticker}`)\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error(`服务器错误: ${response.status}`);\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => {\n//                 if (data.error) {\n//                     throw new Error(data.error);\n//                 }\n//                 setStockData(data);\n\n//                 // 4. --- 这是核心改动：转换数据 ---\n//                 // 确认我们有历史数据\n//                 if (data.history && data.history.length > 0) {\n//                     // 准备图表数据\n//                     const newChartData = {\n//                         labels: data.history.map(item => item.date), // X轴：所有日期\n//                         datasets: [\n//                             {\n//                                 label: '收盘价', // 图例标签\n//                                 data: data.history.map(item => item.close), // Y轴：所有收盘价\n//                                 borderColor: 'rgb(75, 192, 192)',\n//                                 tension: 0.1\n//                             }\n//                         ]\n//                     };\n//                     setChartData(newChartData); // 设置格式化好的图表数据\n//                 }\n//             })\n//             .catch(err => {\n//                 console.error(`获取股票详情失败 (${ticker}):`, err);\n//                 setError(`获取数据失败: ${err.message}`);\n//             })\n//             .finally(() => {\n//                 setLoading(false);\n//             });\n//     }, [ticker]);\n\n//     if (loading) {\n//         return <div>正在加载 {ticker} 的数据...</div>;\n//     }\n\n//     if (error) {\n//         return <div>错误: {error}</div>;\n//     }\n\n//     if (!stockData) {\n//         return <div>没有找到该股票的数据。</div>;\n//     }\n\n//     return (\n//         <div>\n//             <h2>{stockData.name} ({stockData.ticker}) 历史价格 (1年)</h2>\n//             <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n//                 {/* 5. 确保 chartData 准备好之后再渲染图表 */}\n//                 {chartData ? (\n//                     <Line \n//                         data={chartData} \n//                         options={{\n//                             responsive: true,\n//                             plugins: {\n//                                 legend: {\n//                                     position: 'top',\n//                                 },\n//                                 title: {\n//                                     display: true,\n//                                     text: `${ticker} 过去一年价格走势`\n//                                 }\n//                             }\n//                         }}\n//                     />\n//                 ) : (\n//                     <div>正在准备图表...</div>\n//                 )}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default StockDetails;\n\n// frontend/src/components/StockDetails.js (最终功能版：带预测图)\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale, // 1. 引入TimeScale\n} from 'chart.js';\nimport { Chart } from 'react-chartjs-2'; // 引入Chart\n// 2. 引入并使用日期适配器\nimport 'chartjs-adapter-date-fns';\n\nChartJS.register(\n  CategoryScale, LinearScale, PointElement, LineElement,\n  Title, Tooltip, Legend, TimeScale // 3. 注册TimeScale\n);\n\n// 预设一些好看的颜色给不同的模型\nconst modelColors = [\n    'rgba(255, 99, 132, 1)', // 红色\n    'rgba(54, 162, 235, 1)', // 蓝色\n    'rgba(255, 206, 86, 1)', // 黄色\n];\n\nfunction StockDetails() {\n    const { ticker } = useParams();\n    const [chartData, setChartData] = useState(null);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`/api/stocks/${ticker}`)\n            .then(response => response.ok ? response.json() : Promise.reject(`服务器错误: ${response.status}`))\n            .then(data => {\n                if (data.error) return Promise.reject(data.error);\n\n                // --- 4. 核心改动：合并历史和预测数据 ---\n                const historyDataset = {\n                    label: '收盘价',\n                    data: data.history.map(item => ({ x: item.date, y: item.close })),\n                    borderColor: 'rgb(75, 192, 192)',\n                    tension: 0.1\n                };\n\n                const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n                    label: `${modelName} 预测`,\n                    data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n                    borderColor: modelColors[index % modelColors.length],\n                    backgroundColor: modelColors[index % modelColors.length],\n                    showLine: false, // 不画预测线\n                    pointRadius: 6, // 让预测点更明显\n                }));\n\n                setChartData({\n                    datasets: [historyDataset, ...predictionDatasets],\n                });\n            })\n            .catch(err => {\n                console.error(`获取股票详情失败 (${ticker}):`, err);\n                setError(`获取数据失败: ${err.toString()}`);\n            })\n            .finally(() => setLoading(false));\n    }, [ticker]);\n\n    if (loading) return <div>正在加载 {ticker} 的数据...</div>;\n    if (error) return <div>错误: {error}</div>;\n\n    return (\n        <div>\n            <h2>{ticker} 历史价格与模型预测</h2>\n            <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n                {chartData ? (\n                    <Chart type='line' // 使用通用的Chart组件\n                        data={chartData} \n                        options={{\n                            responsive: true,\n                            plugins: {\n                                legend: { position: 'top' },\n                                title: { display: true, text: `${ticker} 价格走势与预测` }\n                            },\n                            scales: { // 5. 明确告诉图表X轴是时间类型\n                                x: {\n                                    type: 'time',\n                                    time: {\n                                        unit: 'day',\n                                        tooltipFormat: 'yyyy-MM-dd',\n                                    },\n                                    title: { display: true, text: '日期' }\n                                },\n                                y: {\n                                    title: { display: true, text: '价格' }\n                                }\n                            }\n                        }}\n                    />\n                ) : <div>正在准备图表...</div>}\n            </div>\n        </div>\n    );\n}\n\nexport default StockDetails;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}