{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/HangSengChart.js\",\n  _s = $RefreshSig$();\n// // src/components/HangSengChart.js\n\n// import React, { useState, useEffect } from 'react';\n// import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';\n\n// const formatDate = (tickItem) => {\n//     // 例如，将 '2024-05-20' 格式化为 '05-20'\n//     return tickItem.slice(5);\n// };\n\n// function HangSengChart() {\n//     const [chartData, setChartData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         fetch('/api/stocks/^HSI')\n//             .then(res => {\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then(data => {\n//                 const formattedData = data.history.map(item => ({\n//                     date: item.date,\n//                     price: item.close,\n//                 }));\n//                 setChartData(formattedData);\n//                 setLoading(false);\n//             })\n//             .catch(err => {\n//                 console.error(\"Failed to fetch Hang Seng Index data:\", err);\n//                 setError(\"Could not load index data.\");\n//                 setLoading(false);\n//             });\n//     }, []); \n//     if (loading) {\n//         return <div className=\"hsi-chart-container placeholder\">Loading Index Chart...</div>;\n//     }\n\n//     if (error) {\n//         return <div className=\"hsi-chart-container placeholder\">{error}</div>;\n//     }\n\n//     return (\n//         <div className=\"hsi-chart-container\">\n//             <h3>Hang Seng Index Trend</h3>\n//             <ResponsiveContainer width=\"100%\" height={250}>\n//                 <LineChart data={chartData}>\n//                     <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#444\" />\n//                     <XAxis \n//                         dataKey=\"date\" \n//                         tickFormatter={formatDate} \n//                         stroke=\"#ccc\"\n//                         fontSize={12}\n//                     />\n//                     <YAxis \n//                         domain={['dataMin - 2', 'dataMax + 2']} \n//                         stroke=\"#ccc\"\n//                         fontSize={12}\n//                     />\n//                     <Tooltip \n//                         contentStyle={{ backgroundColor: '#282c34', border: '1px solid #555' }}\n//                         labelStyle={{ color: '#fff' }}\n//                     />\n//                     <Line \n//                         type=\"monotone\" \n//                         dataKey=\"price\" \n//                         stroke=\"#61dafb\" \n//                         strokeWidth={2} \n//                         dot={false} \n//                     />\n//                 </LineChart>\n//             </ResponsiveContainer>\n//         </div>\n//     );\n// }\n\n// export default HangSengChart;\n\n// src/components/HangSengChart.js\n\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = tickItem => {\n  return tickItem.slice(5);\n};\nfunction HangSengChart() {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch('/api/stocks/0001.HK').then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    }).then(data => {\n      const formattedData = data.history.map(item => ({\n        date: item.date,\n        price: item.close\n      }));\n      setChartData(formattedData);\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Failed to fetch Hang Seng Index data:\", err);\n      setError(\"Could not load index data.\");\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hsi-chart-container placeholder\",\n      children: \"Loading Index Chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hsi-chart-container placeholder\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hsi-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Hang Seng Index Trend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 250,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        margin: {\n          top: 5,\n          right: 30,\n          // 为右侧最后一个日期标签留出空间\n          left: 20,\n          // 为左侧的价格标签留出空间 (这是关键)\n          bottom: 5 // 为底部的日期标签留出空间\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\",\n          stroke: \"#444\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          tickFormatter: formatDate,\n          stroke: \"#ccc\",\n          fontSize: 12\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          domain: ['dataMin - 5', 'dataMax + 5'] // 稍微增大了Y轴的范围，让曲线不顶到边\n          ,\n          stroke: \"#ccc\",\n          fontSize: 12\n          // tickFormatter={(value) => value.toFixed(2)} // 可选：将Y轴数字格式化为两位小数\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          contentStyle: {\n            backgroundColor: '#282c34',\n            border: '1px solid #555'\n          },\n          labelStyle: {\n            color: '#fff'\n          }\n          // formatter={(value) => value.toFixed(2)} // 可选：将提示框中的数字格式化\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"price\",\n          stroke: \"#61dafb\",\n          strokeWidth: 2,\n          dot: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n_s(HangSengChart, \"UhoX46EvB9/nbJ7sTO7dmaxl6VI=\");\n_c = HangSengChart;\nexport default HangSengChart;\nvar _c;\n$RefreshReg$(_c, \"HangSengChart\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","CartesianGrid","jsxDEV","_jsxDEV","formatDate","tickItem","slice","HangSengChart","_s","chartData","setChartData","loading","setLoading","error","setError","fetch","then","res","ok","Error","json","data","formattedData","history","map","item","date","price","close","catch","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","tickFormatter","fontSize","domain","contentStyle","backgroundColor","border","labelStyle","color","type","strokeWidth","dot","_c","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/HangSengChart.js"],"sourcesContent":["// // src/components/HangSengChart.js\n\n// import React, { useState, useEffect } from 'react';\n// import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';\n\n// const formatDate = (tickItem) => {\n//     // 例如，将 '2024-05-20' 格式化为 '05-20'\n//     return tickItem.slice(5);\n// };\n\n// function HangSengChart() {\n//     const [chartData, setChartData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         fetch('/api/stocks/^HSI')\n//             .then(res => {\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then(data => {\n//                 const formattedData = data.history.map(item => ({\n//                     date: item.date,\n//                     price: item.close,\n//                 }));\n//                 setChartData(formattedData);\n//                 setLoading(false);\n//             })\n//             .catch(err => {\n//                 console.error(\"Failed to fetch Hang Seng Index data:\", err);\n//                 setError(\"Could not load index data.\");\n//                 setLoading(false);\n//             });\n//     }, []); \n//     if (loading) {\n//         return <div className=\"hsi-chart-container placeholder\">Loading Index Chart...</div>;\n//     }\n\n//     if (error) {\n//         return <div className=\"hsi-chart-container placeholder\">{error}</div>;\n//     }\n\n//     return (\n//         <div className=\"hsi-chart-container\">\n//             <h3>Hang Seng Index Trend</h3>\n//             <ResponsiveContainer width=\"100%\" height={250}>\n//                 <LineChart data={chartData}>\n//                     <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#444\" />\n//                     <XAxis \n//                         dataKey=\"date\" \n//                         tickFormatter={formatDate} \n//                         stroke=\"#ccc\"\n//                         fontSize={12}\n//                     />\n//                     <YAxis \n//                         domain={['dataMin - 2', 'dataMax + 2']} \n//                         stroke=\"#ccc\"\n//                         fontSize={12}\n//                     />\n//                     <Tooltip \n//                         contentStyle={{ backgroundColor: '#282c34', border: '1px solid #555' }}\n//                         labelStyle={{ color: '#fff' }}\n//                     />\n//                     <Line \n//                         type=\"monotone\" \n//                         dataKey=\"price\" \n//                         stroke=\"#61dafb\" \n//                         strokeWidth={2} \n//                         dot={false} \n//                     />\n//                 </LineChart>\n//             </ResponsiveContainer>\n//         </div>\n//     );\n// }\n\n// export default HangSengChart;\n\n\n// src/components/HangSengChart.js\n\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';\n\nconst formatDate = (tickItem) => {\n    return tickItem.slice(5);\n};\n\nfunction HangSengChart() {\n    const [chartData, setChartData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        fetch('/api/stocks/0001.HK')\n            .then(res => {\n                if (!res.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                return res.json();\n            })\n            .then(data => {\n                const formattedData = data.history.map(item => ({\n                    date: item.date,\n                    price: item.close,\n                }));\n                setChartData(formattedData);\n                setLoading(false);\n            })\n            .catch(err => {\n                console.error(\"Failed to fetch Hang Seng Index data:\", err);\n                setError(\"Could not load index data.\");\n                setLoading(false);\n            });\n    }, []);\n\n    if (loading) {\n        return <div className=\"hsi-chart-container placeholder\">Loading Index Chart...</div>;\n    }\n\n    if (error) {\n        return <div className=\"hsi-chart-container placeholder\">{error}</div>;\n    }\n\n    return (\n        <div className=\"hsi-chart-container\">\n            {/* 标题从 \"Hang Seng Index Trend (using 0001.HK data)\" 简化为 \"Hang Seng Index Trend\" */}\n            <h3>Hang Seng Index Trend</h3>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                {/* \n                  --- 核心修改点在这里！--- \n                  我们添加了 margin 属性，为坐标轴标签留出空间。\n                */}\n                <LineChart \n                    data={chartData}\n                    margin={{\n                        top: 5,\n                        right: 30, // 为右侧最后一个日期标签留出空间\n                        left: 20,  // 为左侧的价格标签留出空间 (这是关键)\n                        bottom: 5, // 为底部的日期标签留出空间\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#444\" />\n                    <XAxis \n                        dataKey=\"date\" \n                        tickFormatter={formatDate} \n                        stroke=\"#ccc\"\n                        fontSize={12}\n                    />\n                    <YAxis \n                        domain={['dataMin - 5', 'dataMax + 5']} // 稍微增大了Y轴的范围，让曲线不顶到边\n                        stroke=\"#ccc\"\n                        fontSize={12}\n                        // tickFormatter={(value) => value.toFixed(2)} // 可选：将Y轴数字格式化为两位小数\n                    />\n                    <Tooltip \n                        contentStyle={{ backgroundColor: '#282c34', border: '1px solid #555' }}\n                        labelStyle={{ color: '#fff' }}\n                        // formatter={(value) => value.toFixed(2)} // 可选：将提示框中的数字格式化\n                    />\n                    <Line \n                        type=\"monotone\" \n                        dataKey=\"price\" \n                        stroke=\"#61dafb\" \n                        strokeWidth={2} \n                        dot={false} \n                    />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default HangSengChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}