{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js\",\n  _s = $RefreshSig$();\n// // // // StockDetails.js (Final Version with Collapsible News)\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import { useParams } from 'react-router-dom';\n// // // import { Chart } from 'react-chartjs-2';\n// // // import {\n// // //   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n// // //   Title, Tooltip, Legend, TimeScale\n// // // } from 'chart.js';\n// // // import 'chartjs-adapter-date-fns';\n\n// // // ChartJS.register(\n// // //   CategoryScale, LinearScale, PointElement, LineElement,\n// // //   Title, Tooltip, Legend, TimeScale\n// // // );\n\n// // // const modelColors = [\n// // //     'rgba(255, 99, 132, 1)', // Red\n// // //     'rgba(54, 162, 235, 1)', // Blue\n// // //     'rgba(255, 206, 86, 1)', // Yellow\n// // // ];\n\n// // // const chartOptions = {\n// // //     responsive: true,\n// // //     maintainAspectRatio: false,\n// // //     plugins: {\n// // //         legend: { position: 'top' },\n// // //         title: { display: true, text: `Price Trends and Predictions` }\n// // //     },\n// // //     scales: {\n// // //         x: {\n// // //             type: 'time',\n// // //             time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n// // //             title: { display: true, text: 'Date' }\n// // //         },\n// // //         y: {\n// // //             title: { display: true, text: 'Price' }\n// // //         }\n// // //     }\n// // // };\n\n// // // function StockDetails() {\n// // //     const { ticker } = useParams();\n// // //     const [chartData, setChartData] = useState(null);\n// // //     const [news, setNews] = useState([]);\n// // //     const [error, setError] = useState(null);\n// // //     const [loading, setLoading] = useState(true);\n\n// // //     // --- 新增状态：控制新闻区域是否展开 ---\n// // //     const [isNewsExpanded, setIsNewsExpanded] = useState(false);\n\n// // //     // --- 新增函数：用于切换新闻区域的展开/折叠状态 ---\n// // //     const toggleNews = () => {\n// // //         setIsNewsExpanded(!isNewsExpanded);\n// // //     };\n\n// // //     useEffect(() => {\n// // //         setLoading(true);\n// // //         setError(null);\n\n// // //         fetch(`/api/stocks/${ticker}`)\n// // //             .then(response => {\n// // //                 if (!response.ok) {\n// // //                     return Promise.reject(`Server error: ${response.status}`);\n// // //                 }\n// // //                 return response.json();\n// // //             })\n// // //             .then(data => {\n// // //                 if (data.error) {\n// // //                     return Promise.reject(data.error);\n// // //                 }\n\n// // //                 const historyDataset = {\n// // //                     label: 'Close Price',\n// // //                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n// // //                     borderColor: 'rgb(75, 192, 192)',\n// // //                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// // //                     tension: 0.1\n// // //                 };\n\n// // //                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n// // //                     label: `${modelName} Prediction`,\n// // //                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n// // //                     borderColor: modelColors[index % modelColors.length],\n// // //                     backgroundColor: modelColors[index % modelColors.length],\n// // //                     showLine: false,\n// // //                     pointRadius: 6,\n// // //                     pointHoverRadius: 8,\n// // //                 }));\n\n// // //                 setChartData({\n// // //                     datasets: [historyDataset, ...predictionDatasets],\n// // //                 });\n\n// // //                 setNews(data.news || []);\n\n// // //             })\n// // //             .catch(err => {\n// // //                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n// // //                 setError(typeof err === 'string' ? err : 'An unknown error occurred while fetching data.');\n// // //             })\n// // //             .finally(() => {\n// // //                 setLoading(false);\n// // //             });\n// // //     }, [ticker]);\n\n// // //     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n// // //     if (error) return <div style={{ color: '#ff4d4d', textAlign: 'center', marginTop: '50px' }}>Error: {error}</div>;\n\n// // //     return (\n// // //         <div>\n// // //             <h2>{ticker} Historical Prices and Model Predictions</h2>\n// // //             <div className=\"details-container\">\n// // //                 <div className=\"chart-container\">\n// // //                     {chartData ? (\n// // //                         <div style={{ position: 'relative', height: '400px' }}>\n// // //                              <Chart type='line' data={chartData} options={chartOptions} />\n// // //                         </div>\n// // //                     ) : (\n// // //                         <div>Preparing chart...</div>\n// // //                     )}\n// // //                 </div>\n\n// // //                 {/* --- 修改后的新闻容器 --- */}\n// // //                 <div className=\"news-container\">\n// // //                     {/* 点击标题可以展开/折叠 */}\n// // //                     <h3 onClick={toggleNews} className=\"news-header\">\n// // //                         Related News\n// // //                         {/* 添加一个视觉指示器 */}\n// // //                         <span>{isNewsExpanded ? '▲' : '▼'}</span>\n// // //                     </h3>\n\n// // //                     {/* 仅在 isNewsExpanded 为 true 时渲染新闻列表 */}\n// // //                     {isNewsExpanded && (\n// // //                         <div className=\"news-list\">\n// // //                             {news.length > 0 ? (\n// // //                                 news.map((item, index) => (\n// // //                                     // --- 修改了新闻项的内部结构 ---\n// // //                                     <div key={index} className=\"news-item\">\n// // //                                         <div className=\"news-content\">\n// // //                                             <h4>{item.title}</h4>\n// // //                                             <p>{item.summary}</p>\n// // //                                         </div>\n// // //                                         <span className=\"news-date\">\n// // //                                             {new Date(item.date).toLocaleDateString()}\n// // //                                         </span>\n// // //                                     </div>\n// // //                                 ))\n// // //                             ) : (\n// // //                                 <p>No related news available.</p>\n// // //                             )}\n// // //                         </div>\n// // //                     )}\n// // //                 </div>\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // }\n\n// // // export default StockDetails;\n\n// // // StockDetails.js (Final Version with className for title)\n\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { Chart } from 'react-chartjs-2';\n// // import {\n// //   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale\n// // } from 'chart.js';\n// // import 'chartjs-adapter-date-fns';\n\n// // // ... (ChartJS.register, modelColors, chartOptions code remains the same)\n// // ChartJS.register(\n// //   CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale\n// // );\n\n// // const modelColors = [\n// //     'rgba(255, 99, 132, 1)', // Red\n// //     'rgba(54, 162, 235, 1)', // Blue\n// //     'rgba(255, 206, 86, 1)', // Yellow\n// // ];\n\n// // const chartOptions = {\n// //     responsive: true,\n// //     maintainAspectRatio: false,\n// //     plugins: {\n// //         legend: { position: 'top' },\n// //         title: { display: true, text: `Price Trends and Predictions` }\n// //     },\n// //     scales: {\n// //         x: {\n// //             type: 'time',\n// //             time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n// //             title: { display: true, text: 'Date' }\n// //         },\n// //         y: {\n// //             title: { display: true, text: 'Price' }\n// //         }\n// //     }\n// // };\n\n// // function StockDetails() {\n// //     const { ticker } = useParams();\n// //     const [chartData, setChartData] = useState(null);\n// //     const [news, setNews] = useState([]);\n// //     const [error, setError] = useState(null);\n// //     const [loading, setLoading] = useState(true);\n// //     const [isNewsExpanded, setIsNewsExpanded] = useState(false);\n\n// //     const toggleNews = () => {\n// //         setIsNewsExpanded(!isNewsExpanded);\n// //     };\n\n// //     useEffect(() => {\n// //         // ... (useEffect logic remains exactly the same)\n// //         setLoading(true);\n// //         setError(null);\n\n// //         fetch(`/api/stocks/${ticker}`)\n// //             .then(response => {\n// //                 if (!response.ok) {\n// //                     return Promise.reject(`Server error: ${response.status}`);\n// //                 }\n// //                 return response.json();\n// //             })\n// //             .then(data => {\n// //                 if (data.error) {\n// //                     return Promise.reject(data.error);\n// //                 }\n\n// //                 const historyDataset = {\n// //                     label: 'Close Price',\n// //                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n// //                     borderColor: 'rgb(75, 192, 192)',\n// //                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// //                     tension: 0.1\n// //                 };\n\n// //                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n// //                     label: `${modelName} Prediction`,\n// //                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n// //                     borderColor: modelColors[index % modelColors.length],\n// //                     backgroundColor: modelColors[index % modelColors.length],\n// //                     showLine: false,\n// //                     pointRadius: 6,\n// //                     pointHoverRadius: 8,\n// //                 }));\n\n// //                 setChartData({\n// //                     datasets: [historyDataset, ...predictionDatasets],\n// //                 });\n\n// //                 setNews(data.news || []);\n\n// //             })\n// //             .catch(err => {\n// //                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n// //                 setError(typeof err === 'string' ? err : 'An unknown error occurred while fetching data.');\n// //             })\n// //             .finally(() => {\n// //                 setLoading(false);\n// //             });\n// //     }, [ticker]);\n\n// //     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n// //     if (error) return <div style={{ color: '#ff4d4d', textAlign: 'center', marginTop: '50px' }}>Error: {error}</div>;\n\n// //     return (\n// //         <div className=\"stock-details-page-container\">\n// //             {/* --- 这里是修改的地方：给 h2 添加了 className --- */}\n// //             <h2 className=\"stock-details-subtitle\">\n// //                 {ticker} Historical Prices and Model Predictions\n// //             </h2>\n\n// //             <div className=\"details-container\">\n// //                 <div className=\"chart-container\">\n// //                     {chartData ? (\n// //                         <div style={{ position: 'relative', height: '400px' }}>\n// //                              <Chart type='line' data={chartData} options={chartOptions} />\n// //                         </div>\n// //                     ) : (\n// //                         <div>Preparing chart...</div>\n// //                     )}\n// //                 </div>\n\n// //                 <div className=\"news-container\">\n// //                     <h3 onClick={toggleNews} className=\"news-header\">\n// //                         Related News\n// //                         <span>{isNewsExpanded ? '▲' : '▼'}</span>\n// //                     </h3>\n\n// //                     {isNewsExpanded && (\n// //                         <div className=\"news-list\">\n// //                             {news.length > 0 ? (\n// //                                 news.map((item, index) => (\n// //                                     <div key={index} className=\"news-item\">\n// //                                         <div className=\"news-content\">\n// //                                             <h4>{item.title}</h4>\n// //                                             <p>{item.summary}</p>\n// //                                         </div>\n// //                                         <span className=\"news-date\">\n// //                                             {new Date(item.date).toLocaleDateString()}\n// //                                         </span>\n// //                                     </div>\n// //                                 ))\n// //                             ) : (\n// //                                 <p>No related news available.</p>\n// //                             )}\n// //                         </div>\n// //                     )}\n// //                 </div>\n// //             </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default StockDetails;\n\n// // StockDetails.js (在您原有代码基础上仅做增补)\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Chart } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n//   Title, Tooltip, Legend, TimeScale\n// } from 'chart.js';\n// import 'chartjs-adapter-date-fns';\n\n// // --- 您原有的代码 (完全不变) ---\n// ChartJS.register(\n//   CategoryScale, LinearScale, PointElement, LineElement,\n//   Title, Tooltip, Legend, TimeScale\n// );\n// const modelColors = [\n//     'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',\n// ];\n// const chartOptions = {\n//     responsive: true, maintainAspectRatio: false,\n//     plugins: { legend: { position: 'top' }, title: { display: true, text: `Price Trends and Predictions` } },\n//     scales: {\n//         x: { type: 'time', time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' }, title: { display: true, text: 'Date' } },\n//         y: { title: { display: true, text: 'Price' } }\n//     }\n// };\n\n// function StockDetails() {\n//     const { ticker } = useParams();\n//     // --- 您原有的状态 (完全不变) ---\n//     const [chartData, setChartData] = useState(null);\n//     const [news, setNews] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [isNewsExpanded, setIsNewsExpanded] = useState(false);\n\n//     // --- ★★★ 新增的状态: 用于AI摘要 ★★★ ---\n//     const [historicalData, setHistoricalData] = useState(null); // 用于发送给AI后端\n//     const [aiSummary, setAiSummary] = useState('');\n//     const [isAiLoading, setIsAiLoading] = useState(false);\n//     const [aiError, setAiError] = useState(null);\n\n//     // --- 您原有的函数 (完全不变) ---\n//     const toggleNews = () => setIsNewsExpanded(!isNewsExpanded);\n\n//     // --- 您原有的 useEffect (仅补充一行代码) ---\n//     useEffect(() => {\n//         setLoading(true);\n//         setError(null);\n//         fetch(`/api/stocks/${ticker}`)\n//             .then(response => {\n//                 if (!response.ok) return Promise.reject(`Server error: ${response.status}`);\n//                 return response.json();\n//             })\n//             .then(data => {\n//                 if (data.error) return Promise.reject(data.error);\n\n//                 const historyDataset = {\n//                     label: 'Close Price',\n//                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n//                     borderColor: 'rgb(75, 192, 192)',\n//                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n//                     tension: 0.1\n//                 };\n//                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n//                     label: `${modelName} Prediction`,\n//                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n//                     borderColor: modelColors[index % modelColors.length],\n//                     backgroundColor: modelColors[index % modelColors.length],\n//                     showLine: false, pointRadius: 6, pointHoverRadius: 8,\n//                 }));\n//                 setChartData({ datasets: [historyDataset, ...predictionDatasets] });\n//                 setNews(data.news || []);\n\n//                 // --- ★★★ 唯一补充的一行: 保存历史数据以触发AI分析 ★★★ ---\n//                 setHistoricalData(data.history);\n//             })\n//             .catch(err => {\n//                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n//                 setError(typeof err === 'string' ? err : 'An unknown error occurred while fetching data.');\n//             })\n//             .finally(() => setLoading(false));\n//     }, [ticker]);\n\n//     // --- ★★★ 新增的 useEffect: 专门用于获取AI摘要 ★★★ ---\n//     useEffect(() => {\n//         if (historicalData && historicalData.length > 0) {\n//             setIsAiLoading(true);\n//             setAiError(null);\n//             fetch('/api/summarize', {\n//                 method: 'POST',\n//                 headers: { 'Content-Type': 'application/json' },\n//                 body: JSON.stringify({ historicalData, ticker })\n//             })\n//             .then(response => {\n//                 if (!response.ok) return Promise.reject('Failed to get AI summary from server.');\n//                 return response.json();\n//             })\n//             .then(data => {\n//                 if (data.error) return Promise.reject(data.error);\n//                 setAiSummary(data.summary);\n//             })\n//             .catch(err => {\n//                 console.error(\"AI summary fetch error:\", err);\n//                 setAiError(typeof err === 'string' ? err : '无法加载AI分析摘要。');\n//             })\n//             .finally(() => setIsAiLoading(false));\n//         }\n//     }, [historicalData, ticker]); // 当历史数据加载完毕后触发\n\n//     // --- 您原有的渲染逻辑 (完全不变) ---\n//     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n//     if (error) return <div style={{ color: '#ff4d4d', textAlign: 'center', marginTop: '50px' }}>Error: {error}</div>;\n\n//     // --- 您原有的 JSX (仅增加一个AI摘要的div) ---\n//     return (\n//         <div className=\"stock-details-page-container\">\n//             <h2 className=\"stock-details-subtitle\">\n//                 {ticker} Historical Prices and Model Predictions\n//             </h2>\n//             <div className=\"details-container\">\n//                 <div className=\"chart-container\">\n//                     {chartData ? (\n//                         <div style={{ position: 'relative', height: '400px' }}>\n//                              <Chart type='line' data={chartData} options={chartOptions} />\n//                         </div>\n//                     ) : ( <div>Preparing chart...</div> )}\n//                 </div>\n\n//                 {/* --- ★★★ 新增的AI智能分析容器 ★★★ --- */}\n//                 <div className=\"ai-summary-container\" style={{marginTop: '20px', padding: '15px', backgroundColor: '#f8f9fa', borderRadius: '8px'}}>\n//                     <h3 className=\"ai-summary-header\">📈 AI 智能分析</h3>\n//                     {isAiLoading && <p>正在生成AI摘要，请稍候...</p>}\n//                     {aiError && <p style={{color: 'red'}}>{aiError}</p>}\n//                     {aiSummary && <p style={{whiteSpace: 'pre-wrap', lineHeight: '1.6'}}>{aiSummary}</p>}\n//                 </div>\n\n//                 {/* --- 您原有的新闻容器 (完全不变) --- */}\n//                 <div className=\"news-container\">\n//                     <h3 onClick={toggleNews} className=\"news-header\">\n//                         Related News <span>{isNewsExpanded ? '▲' : '▼'}</span>\n//                     </h3>\n//                     {isNewsExpanded && (\n//                         <div className=\"news-list\">\n//                             {news.length > 0 ? (\n//                                 news.map((item, index) => (\n//                                     <div key={index} className=\"news-item\">\n//                                         <div className=\"news-content\">\n//                                             <h4>{item.title}</h4>\n//                                             <p>{item.summary}</p>\n//                                         </div>\n//                                         <span className=\"news-date\">{new Date(item.date).toLocaleDateString()}</span>\n//                                     </div>\n//                                 ))\n//                             ) : ( <p>No related news available.</p> )}\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default StockDetails;\n\n// 文件路径: frontend/src/components/StockDetails.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport StockChart from './StockChart';\nimport NewsList from './NewsList';\nimport './StockDetails.css'; // <-- ★★★ 新增的导入语句 ★★★\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StockDetails() {\n  _s();\n  const [stockData, setStockData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [aiSummary, setAiSummary] = useState('');\n  const [isSummaryLoading, setIsSummaryLoading] = useState(true);\n  const {\n    ticker\n  } = useParams();\n  useEffect(() => {\n    async function fetchData() {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`/api/stocks/${ticker}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setStockData(data);\n        fetchAiSummary(data.history, data.ticker);\n      } catch (e) {\n        setError(e.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    async function fetchAiSummary(historicalData, stockTicker) {\n      setIsSummaryLoading(true);\n      try {\n        const response = await fetch('/api/summarize', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            historicalData,\n            ticker: stockTicker\n          })\n        });\n        const result = await response.json();\n        if (response.ok) {\n          setAiSummary(result.summary);\n        } else {\n          setAiSummary(`无法获取AI分析: ${result.error || '未知错误'}`);\n        }\n      } catch (e) {\n        setAiSummary(`无法连接到AI分析服务: ${e.message}`);\n      } finally {\n        setIsSummaryLoading(false);\n      }\n    }\n    fetchData();\n  }, [ticker]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"\\u6B63\\u5728\\u52A0\\u8F7D\\u80A1\\u7968\\u6570\\u636E...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 552,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"\\u9519\\u8BEF: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 553,\n    columnNumber: 21\n  }, this);\n  if (!stockData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u6CA1\\u6709\\u627E\\u5230\\u6570\\u636E\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 554,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-details-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [stockData.name, \" (\", stockData.ticker, \") \\u5386\\u53F2\\u4EF7\\u683C\\u4E0E\\u6A21\\u578B\\u9884\\u6D4B\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container card\",\n        children: /*#__PURE__*/_jsxDEV(StockChart, {\n          history: stockData.history,\n          predictions: stockData.predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-summary-card card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"chart-icon\",\n              children: \"\\uD83D\\uDCC8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 17\n            }, this), \" AI \\u667A\\u80FD\\u5206\\u6790\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this), isSummaryLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u6B63\\u5728\\u751F\\u6210\\u5206\\u6790...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ai-summary-text\",\n            children: aiSummary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"news-card card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\u76F8\\u5173\\u65B0\\u95FB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NewsList, {\n            newsItems: stockData.news\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 557,\n    columnNumber: 5\n  }, this);\n}\n_s(StockDetails, \"GxvywFNtJFCpUNIKr/7g4uWKGtA=\", false, function () {\n  return [useParams];\n});\n_c = StockDetails;\nexport default StockDetails;\nvar _c;\n$RefreshReg$(_c, \"StockDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","StockChart","NewsList","jsxDEV","_jsxDEV","StockDetails","_s","stockData","setStockData","isLoading","setIsLoading","error","setError","aiSummary","setAiSummary","isSummaryLoading","setIsSummaryLoading","ticker","fetchData","response","fetch","ok","Error","status","data","json","fetchAiSummary","history","e","message","historicalData","stockTicker","method","headers","body","JSON","stringify","result","summary","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","predictions","role","newsItems","news","_c","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js"],"sourcesContent":["// // // // StockDetails.js (Final Version with Collapsible News)\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import { useParams } from 'react-router-dom';\n// // // import { Chart } from 'react-chartjs-2';\n// // // import {\n// // //   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n// // //   Title, Tooltip, Legend, TimeScale\n// // // } from 'chart.js';\n// // // import 'chartjs-adapter-date-fns';\n\n// // // ChartJS.register(\n// // //   CategoryScale, LinearScale, PointElement, LineElement,\n// // //   Title, Tooltip, Legend, TimeScale\n// // // );\n\n// // // const modelColors = [\n// // //     'rgba(255, 99, 132, 1)', // Red\n// // //     'rgba(54, 162, 235, 1)', // Blue\n// // //     'rgba(255, 206, 86, 1)', // Yellow\n// // // ];\n\n// // // const chartOptions = {\n// // //     responsive: true,\n// // //     maintainAspectRatio: false,\n// // //     plugins: {\n// // //         legend: { position: 'top' },\n// // //         title: { display: true, text: `Price Trends and Predictions` }\n// // //     },\n// // //     scales: {\n// // //         x: {\n// // //             type: 'time',\n// // //             time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n// // //             title: { display: true, text: 'Date' }\n// // //         },\n// // //         y: {\n// // //             title: { display: true, text: 'Price' }\n// // //         }\n// // //     }\n// // // };\n\n// // // function StockDetails() {\n// // //     const { ticker } = useParams();\n// // //     const [chartData, setChartData] = useState(null);\n// // //     const [news, setNews] = useState([]);\n// // //     const [error, setError] = useState(null);\n// // //     const [loading, setLoading] = useState(true);\n    \n// // //     // --- 新增状态：控制新闻区域是否展开 ---\n// // //     const [isNewsExpanded, setIsNewsExpanded] = useState(false);\n\n// // //     // --- 新增函数：用于切换新闻区域的展开/折叠状态 ---\n// // //     const toggleNews = () => {\n// // //         setIsNewsExpanded(!isNewsExpanded);\n// // //     };\n\n// // //     useEffect(() => {\n// // //         setLoading(true);\n// // //         setError(null);\n        \n// // //         fetch(`/api/stocks/${ticker}`)\n// // //             .then(response => {\n// // //                 if (!response.ok) {\n// // //                     return Promise.reject(`Server error: ${response.status}`);\n// // //                 }\n// // //                 return response.json();\n// // //             })\n// // //             .then(data => {\n// // //                 if (data.error) {\n// // //                     return Promise.reject(data.error);\n// // //                 }\n\n// // //                 const historyDataset = {\n// // //                     label: 'Close Price',\n// // //                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n// // //                     borderColor: 'rgb(75, 192, 192)',\n// // //                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// // //                     tension: 0.1\n// // //                 };\n\n// // //                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n// // //                     label: `${modelName} Prediction`,\n// // //                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n// // //                     borderColor: modelColors[index % modelColors.length],\n// // //                     backgroundColor: modelColors[index % modelColors.length],\n// // //                     showLine: false,\n// // //                     pointRadius: 6,\n// // //                     pointHoverRadius: 8,\n// // //                 }));\n\n// // //                 setChartData({\n// // //                     datasets: [historyDataset, ...predictionDatasets],\n// // //                 });\n\n// // //                 setNews(data.news || []);\n\n// // //             })\n// // //             .catch(err => {\n// // //                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n// // //                 setError(typeof err === 'string' ? err : 'An unknown error occurred while fetching data.');\n// // //             })\n// // //             .finally(() => {\n// // //                 setLoading(false);\n// // //             });\n// // //     }, [ticker]);\n\n// // //     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n// // //     if (error) return <div style={{ color: '#ff4d4d', textAlign: 'center', marginTop: '50px' }}>Error: {error}</div>;\n\n// // //     return (\n// // //         <div>\n// // //             <h2>{ticker} Historical Prices and Model Predictions</h2>\n// // //             <div className=\"details-container\">\n// // //                 <div className=\"chart-container\">\n// // //                     {chartData ? (\n// // //                         <div style={{ position: 'relative', height: '400px' }}>\n// // //                              <Chart type='line' data={chartData} options={chartOptions} />\n// // //                         </div>\n// // //                     ) : (\n// // //                         <div>Preparing chart...</div>\n// // //                     )}\n// // //                 </div>\n                \n// // //                 {/* --- 修改后的新闻容器 --- */}\n// // //                 <div className=\"news-container\">\n// // //                     {/* 点击标题可以展开/折叠 */}\n// // //                     <h3 onClick={toggleNews} className=\"news-header\">\n// // //                         Related News\n// // //                         {/* 添加一个视觉指示器 */}\n// // //                         <span>{isNewsExpanded ? '▲' : '▼'}</span>\n// // //                     </h3>\n\n// // //                     {/* 仅在 isNewsExpanded 为 true 时渲染新闻列表 */}\n// // //                     {isNewsExpanded && (\n// // //                         <div className=\"news-list\">\n// // //                             {news.length > 0 ? (\n// // //                                 news.map((item, index) => (\n// // //                                     // --- 修改了新闻项的内部结构 ---\n// // //                                     <div key={index} className=\"news-item\">\n// // //                                         <div className=\"news-content\">\n// // //                                             <h4>{item.title}</h4>\n// // //                                             <p>{item.summary}</p>\n// // //                                         </div>\n// // //                                         <span className=\"news-date\">\n// // //                                             {new Date(item.date).toLocaleDateString()}\n// // //                                         </span>\n// // //                                     </div>\n// // //                                 ))\n// // //                             ) : (\n// // //                                 <p>No related news available.</p>\n// // //                             )}\n// // //                         </div>\n// // //                     )}\n// // //                 </div>\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // }\n\n// // // export default StockDetails;\n\n\n// // // StockDetails.js (Final Version with className for title)\n\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { Chart } from 'react-chartjs-2';\n// // import {\n// //   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale\n// // } from 'chart.js';\n// // import 'chartjs-adapter-date-fns';\n\n// // // ... (ChartJS.register, modelColors, chartOptions code remains the same)\n// // ChartJS.register(\n// //   CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale\n// // );\n\n// // const modelColors = [\n// //     'rgba(255, 99, 132, 1)', // Red\n// //     'rgba(54, 162, 235, 1)', // Blue\n// //     'rgba(255, 206, 86, 1)', // Yellow\n// // ];\n\n// // const chartOptions = {\n// //     responsive: true,\n// //     maintainAspectRatio: false,\n// //     plugins: {\n// //         legend: { position: 'top' },\n// //         title: { display: true, text: `Price Trends and Predictions` }\n// //     },\n// //     scales: {\n// //         x: {\n// //             type: 'time',\n// //             time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n// //             title: { display: true, text: 'Date' }\n// //         },\n// //         y: {\n// //             title: { display: true, text: 'Price' }\n// //         }\n// //     }\n// // };\n\n\n// // function StockDetails() {\n// //     const { ticker } = useParams();\n// //     const [chartData, setChartData] = useState(null);\n// //     const [news, setNews] = useState([]);\n// //     const [error, setError] = useState(null);\n// //     const [loading, setLoading] = useState(true);\n// //     const [isNewsExpanded, setIsNewsExpanded] = useState(false);\n\n// //     const toggleNews = () => {\n// //         setIsNewsExpanded(!isNewsExpanded);\n// //     };\n\n// //     useEffect(() => {\n// //         // ... (useEffect logic remains exactly the same)\n// //         setLoading(true);\n// //         setError(null);\n        \n// //         fetch(`/api/stocks/${ticker}`)\n// //             .then(response => {\n// //                 if (!response.ok) {\n// //                     return Promise.reject(`Server error: ${response.status}`);\n// //                 }\n// //                 return response.json();\n// //             })\n// //             .then(data => {\n// //                 if (data.error) {\n// //                     return Promise.reject(data.error);\n// //                 }\n\n// //                 const historyDataset = {\n// //                     label: 'Close Price',\n// //                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n// //                     borderColor: 'rgb(75, 192, 192)',\n// //                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// //                     tension: 0.1\n// //                 };\n\n// //                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n// //                     label: `${modelName} Prediction`,\n// //                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n// //                     borderColor: modelColors[index % modelColors.length],\n// //                     backgroundColor: modelColors[index % modelColors.length],\n// //                     showLine: false,\n// //                     pointRadius: 6,\n// //                     pointHoverRadius: 8,\n// //                 }));\n\n// //                 setChartData({\n// //                     datasets: [historyDataset, ...predictionDatasets],\n// //                 });\n\n// //                 setNews(data.news || []);\n\n// //             })\n// //             .catch(err => {\n// //                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n// //                 setError(typeof err === 'string' ? err : 'An unknown error occurred while fetching data.');\n// //             })\n// //             .finally(() => {\n// //                 setLoading(false);\n// //             });\n// //     }, [ticker]);\n\n// //     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n// //     if (error) return <div style={{ color: '#ff4d4d', textAlign: 'center', marginTop: '50px' }}>Error: {error}</div>;\n\n// //     return (\n// //         <div className=\"stock-details-page-container\">\n// //             {/* --- 这里是修改的地方：给 h2 添加了 className --- */}\n// //             <h2 className=\"stock-details-subtitle\">\n// //                 {ticker} Historical Prices and Model Predictions\n// //             </h2>\n            \n// //             <div className=\"details-container\">\n// //                 <div className=\"chart-container\">\n// //                     {chartData ? (\n// //                         <div style={{ position: 'relative', height: '400px' }}>\n// //                              <Chart type='line' data={chartData} options={chartOptions} />\n// //                         </div>\n// //                     ) : (\n// //                         <div>Preparing chart...</div>\n// //                     )}\n// //                 </div>\n                \n// //                 <div className=\"news-container\">\n// //                     <h3 onClick={toggleNews} className=\"news-header\">\n// //                         Related News\n// //                         <span>{isNewsExpanded ? '▲' : '▼'}</span>\n// //                     </h3>\n\n// //                     {isNewsExpanded && (\n// //                         <div className=\"news-list\">\n// //                             {news.length > 0 ? (\n// //                                 news.map((item, index) => (\n// //                                     <div key={index} className=\"news-item\">\n// //                                         <div className=\"news-content\">\n// //                                             <h4>{item.title}</h4>\n// //                                             <p>{item.summary}</p>\n// //                                         </div>\n// //                                         <span className=\"news-date\">\n// //                                             {new Date(item.date).toLocaleDateString()}\n// //                                         </span>\n// //                                     </div>\n// //                                 ))\n// //                             ) : (\n// //                                 <p>No related news available.</p>\n// //                             )}\n// //                         </div>\n// //                     )}\n// //                 </div>\n// //             </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default StockDetails;\n\n\n// // StockDetails.js (在您原有代码基础上仅做增补)\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Chart } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n//   Title, Tooltip, Legend, TimeScale\n// } from 'chart.js';\n// import 'chartjs-adapter-date-fns';\n\n// // --- 您原有的代码 (完全不变) ---\n// ChartJS.register(\n//   CategoryScale, LinearScale, PointElement, LineElement,\n//   Title, Tooltip, Legend, TimeScale\n// );\n// const modelColors = [\n//     'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',\n// ];\n// const chartOptions = {\n//     responsive: true, maintainAspectRatio: false,\n//     plugins: { legend: { position: 'top' }, title: { display: true, text: `Price Trends and Predictions` } },\n//     scales: {\n//         x: { type: 'time', time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' }, title: { display: true, text: 'Date' } },\n//         y: { title: { display: true, text: 'Price' } }\n//     }\n// };\n\n// function StockDetails() {\n//     const { ticker } = useParams();\n//     // --- 您原有的状态 (完全不变) ---\n//     const [chartData, setChartData] = useState(null);\n//     const [news, setNews] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [isNewsExpanded, setIsNewsExpanded] = useState(false);\n\n//     // --- ★★★ 新增的状态: 用于AI摘要 ★★★ ---\n//     const [historicalData, setHistoricalData] = useState(null); // 用于发送给AI后端\n//     const [aiSummary, setAiSummary] = useState('');\n//     const [isAiLoading, setIsAiLoading] = useState(false);\n//     const [aiError, setAiError] = useState(null);\n    \n//     // --- 您原有的函数 (完全不变) ---\n//     const toggleNews = () => setIsNewsExpanded(!isNewsExpanded);\n\n//     // --- 您原有的 useEffect (仅补充一行代码) ---\n//     useEffect(() => {\n//         setLoading(true);\n//         setError(null);\n//         fetch(`/api/stocks/${ticker}`)\n//             .then(response => {\n//                 if (!response.ok) return Promise.reject(`Server error: ${response.status}`);\n//                 return response.json();\n//             })\n//             .then(data => {\n//                 if (data.error) return Promise.reject(data.error);\n\n//                 const historyDataset = {\n//                     label: 'Close Price',\n//                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n//                     borderColor: 'rgb(75, 192, 192)',\n//                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n//                     tension: 0.1\n//                 };\n//                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n//                     label: `${modelName} Prediction`,\n//                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n//                     borderColor: modelColors[index % modelColors.length],\n//                     backgroundColor: modelColors[index % modelColors.length],\n//                     showLine: false, pointRadius: 6, pointHoverRadius: 8,\n//                 }));\n//                 setChartData({ datasets: [historyDataset, ...predictionDatasets] });\n//                 setNews(data.news || []);\n\n//                 // --- ★★★ 唯一补充的一行: 保存历史数据以触发AI分析 ★★★ ---\n//                 setHistoricalData(data.history);\n//             })\n//             .catch(err => {\n//                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n//                 setError(typeof err === 'string' ? err : 'An unknown error occurred while fetching data.');\n//             })\n//             .finally(() => setLoading(false));\n//     }, [ticker]);\n\n//     // --- ★★★ 新增的 useEffect: 专门用于获取AI摘要 ★★★ ---\n//     useEffect(() => {\n//         if (historicalData && historicalData.length > 0) {\n//             setIsAiLoading(true);\n//             setAiError(null);\n//             fetch('/api/summarize', {\n//                 method: 'POST',\n//                 headers: { 'Content-Type': 'application/json' },\n//                 body: JSON.stringify({ historicalData, ticker })\n//             })\n//             .then(response => {\n//                 if (!response.ok) return Promise.reject('Failed to get AI summary from server.');\n//                 return response.json();\n//             })\n//             .then(data => {\n//                 if (data.error) return Promise.reject(data.error);\n//                 setAiSummary(data.summary);\n//             })\n//             .catch(err => {\n//                 console.error(\"AI summary fetch error:\", err);\n//                 setAiError(typeof err === 'string' ? err : '无法加载AI分析摘要。');\n//             })\n//             .finally(() => setIsAiLoading(false));\n//         }\n//     }, [historicalData, ticker]); // 当历史数据加载完毕后触发\n\n//     // --- 您原有的渲染逻辑 (完全不变) ---\n//     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n//     if (error) return <div style={{ color: '#ff4d4d', textAlign: 'center', marginTop: '50px' }}>Error: {error}</div>;\n\n//     // --- 您原有的 JSX (仅增加一个AI摘要的div) ---\n//     return (\n//         <div className=\"stock-details-page-container\">\n//             <h2 className=\"stock-details-subtitle\">\n//                 {ticker} Historical Prices and Model Predictions\n//             </h2>\n//             <div className=\"details-container\">\n//                 <div className=\"chart-container\">\n//                     {chartData ? (\n//                         <div style={{ position: 'relative', height: '400px' }}>\n//                              <Chart type='line' data={chartData} options={chartOptions} />\n//                         </div>\n//                     ) : ( <div>Preparing chart...</div> )}\n//                 </div>\n                \n//                 {/* --- ★★★ 新增的AI智能分析容器 ★★★ --- */}\n//                 <div className=\"ai-summary-container\" style={{marginTop: '20px', padding: '15px', backgroundColor: '#f8f9fa', borderRadius: '8px'}}>\n//                     <h3 className=\"ai-summary-header\">📈 AI 智能分析</h3>\n//                     {isAiLoading && <p>正在生成AI摘要，请稍候...</p>}\n//                     {aiError && <p style={{color: 'red'}}>{aiError}</p>}\n//                     {aiSummary && <p style={{whiteSpace: 'pre-wrap', lineHeight: '1.6'}}>{aiSummary}</p>}\n//                 </div>\n\n//                 {/* --- 您原有的新闻容器 (完全不变) --- */}\n//                 <div className=\"news-container\">\n//                     <h3 onClick={toggleNews} className=\"news-header\">\n//                         Related News <span>{isNewsExpanded ? '▲' : '▼'}</span>\n//                     </h3>\n//                     {isNewsExpanded && (\n//                         <div className=\"news-list\">\n//                             {news.length > 0 ? (\n//                                 news.map((item, index) => (\n//                                     <div key={index} className=\"news-item\">\n//                                         <div className=\"news-content\">\n//                                             <h4>{item.title}</h4>\n//                                             <p>{item.summary}</p>\n//                                         </div>\n//                                         <span className=\"news-date\">{new Date(item.date).toLocaleDateString()}</span>\n//                                     </div>\n//                                 ))\n//                             ) : ( <p>No related news available.</p> )}\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default StockDetails;\n\n// 文件路径: frontend/src/components/StockDetails.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport StockChart from './StockChart';\nimport NewsList from './NewsList';\nimport './StockDetails.css'; // <-- ★★★ 新增的导入语句 ★★★\n\nfunction StockDetails() {\n  const [stockData, setStockData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [aiSummary, setAiSummary] = useState('');\n  const [isSummaryLoading, setIsSummaryLoading] = useState(true);\n\n  const { ticker } = useParams();\n\n  useEffect(() => {\n    async function fetchData() {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`/api/stocks/${ticker}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setStockData(data);\n        fetchAiSummary(data.history, data.ticker);\n      } catch (e) {\n        setError(e.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    async function fetchAiSummary(historicalData, stockTicker) {\n        setIsSummaryLoading(true);\n        try {\n            const response = await fetch('/api/summarize', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ historicalData, ticker: stockTicker }),\n            });\n            const result = await response.json();\n            if (response.ok) {\n                setAiSummary(result.summary);\n            } else {\n                setAiSummary(`无法获取AI分析: ${result.error || '未知错误'}`);\n            }\n        } catch (e) {\n            setAiSummary(`无法连接到AI分析服务: ${e.message}`);\n        } finally {\n            setIsSummaryLoading(false);\n        }\n    }\n\n    fetchData();\n  }, [ticker]);\n\n  if (isLoading) return <div className=\"loading\">正在加载股票数据...</div>;\n  if (error) return <div className=\"error\">错误: {error}</div>;\n  if (!stockData) return <div>没有找到数据</div>;\n\n  return (\n    <div className=\"stock-details-container\">\n      <h1>{stockData.name} ({stockData.ticker}) 历史价格与模型预测</h1>\n      <div className=\"main-content\">\n        <div className=\"chart-container card\">\n          <StockChart history={stockData.history} predictions={stockData.predictions} />\n        </div>\n        <div className=\"side-panel\">\n          <div className=\"ai-summary-card card\">\n            <h2><span role=\"img\" aria-label=\"chart-icon\">📈</span> AI 智能分析</h2>\n            {isSummaryLoading ? (\n              <p>正在生成分析...</p>\n            ) : (\n              <p className=\"ai-summary-text\">{aiSummary}</p>\n            )}\n          </div>\n          <div className=\"news-card card\">\n            <h2>相关新闻</h2>\n            <NewsList newsItems={stockData.news} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default StockDetails;"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,O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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}