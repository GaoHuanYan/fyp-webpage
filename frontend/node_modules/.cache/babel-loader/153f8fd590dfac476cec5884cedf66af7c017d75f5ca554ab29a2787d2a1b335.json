{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js\",\n  _s = $RefreshSig$();\n// // // // // import React, { useState, useEffect } from 'react';\n// // // // // import { useParams } from 'react-router-dom';\n// // // // // import { Line } from 'react-chartjs-2';\n// // // // // import {\n// // // // //   Chart as ChartJS,\n// // // // //   CategoryScale,\n// // // // //   LinearScale,\n// // // // //   PointElement,\n// // // // //   LineElement,\n// // // // //   Title,\n// // // // //   Tooltip,\n// // // // //   Legend,\n// // // // // } from 'chart.js';\n\n// // // // // ChartJS.register(\n// // // // //   CategoryScale,\n// // // // //   LinearScale,\n// // // // //   PointElement,\n// // // // //   LineElement,\n// // // // //   Title,\n// // // // //   Tooltip,\n// // // // //   Legend\n// // // // // );\n\n// // // // // function StockDetails() {\n// // // // //   const { ticker } = useParams();\n// // // // //   const [stockData, setStockData] = useState(null);\n// // // // //   const [news, setNews] = useState(null);\n// // // // //   const [prediction, setPrediction] = useState(null);\n// // // // //   const [loading, setLoading] = useState(true);\n// // // // //   const [error, setError] = useState(null);\n\n// // // // //   useEffect(() => {\n// // // // //     const fetchData = async () => {\n// // // // //       setLoading(true);\n// // // // //       setError(null);\n// // // // //       try {\n// // // // //         const [detailsRes, newsRes, predictionRes] = await Promise.all([\n// // // // //           fetch(`/api/stocks/${ticker}`),\n// // // // //           fetch(`/api/stocks/${ticker}/news`),\n// // // // //           fetch(`/api/predict/${ticker}`),\n// // // // //         ]);\n\n// // // // //         if (!detailsRes.ok || !newsRes.ok || !predictionRes.ok) {\n// // // // //           throw new Error('获取数据失败');\n// // // // //         }\n\n// // // // //         const detailsData = await detailsRes.json();\n// // // // //         const newsData = await newsRes.json();\n// // // // //         const predictionData = await predictionRes.json();\n\n// // // // //         setStockData(detailsData);\n// // // // //         setNews(newsData);\n// // // // //         setPrediction(predictionData);\n// // // // //       } catch (err) {\n// // // // //         setError(err.message);\n// // // // //       } finally {\n// // // // //         setLoading(false);\n// // // // //       }\n// // // // //     };\n\n// // // // //     fetchData();\n// // // // //   }, [ticker]);\n\n// // // // //   if (loading) return <div className=\"loading\">正在加载股票数据...</div>;\n// // // // //   if (error) return <div className=\"error\">错误: {error}</div>;\n// // // // //   if (!stockData) return null;\n\n// // // // //   const chartData = {\n// // // // //     labels: stockData.map(data => data.date),\n// // // // //     datasets: [\n// // // // //       {\n// // // // //         label: `${ticker} 收盘价`,\n// // // // //         data: stockData.map(data => data.close),\n// // // // //         borderColor: 'rgb(75, 192, 192)',\n// // // // //         backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// // // // //       },\n// // // // //     ],\n// // // // //   };\n\n// // // // //   const chartOptions = {\n// // // // //     responsive: true,\n// // // // //     plugins: {\n// // // // //       legend: {\n// // // // //         position: 'top',\n// // // // //       },\n// // // // //       title: {\n// // // // //         display: true,\n// // // // //         text: `${ticker} 股价走势`,\n// // // // //       },\n// // // // //       tooltip: {\n// // // // //         callbacks: {\n// // // // //           label: function (context) {\n// // // // //             const index = context.dataIndex;\n// // // // //             const dataPoint = stockData[index];\n// // // // //             if (!dataPoint) return '';\n// // // // //             return [\n// // // // //               `收盘: ${dataPoint.close.toFixed(2)}`,\n// // // // //               `开盘: ${dataPoint.open.toFixed(2)}`,\n// // // // //               `最高: ${dataPoint.high.toFixed(2)}`,\n// // // // //               `最低: ${dataPoint.low.toFixed(2)}`,\n// // // // //             ];\n// // // // //           },\n// // // // //         },\n// // // // //       },\n// // // // //     },\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"stock-details-container\">\n// // // // //       <h2>{ticker} - 股票详情</h2>\n\n// // // // //       <section className=\"chart-prediction-section\">\n// // // // //         <div className=\"chart-container\">\n// // // // //           <Line options={chartOptions} data={chartData} />\n// // // // //         </div>\n\n// // // // //         {prediction && (\n// // // // //           <div className=\"prediction-container\">\n// // // // //             <h3>模型预测明日收盘价</h3>\n// // // // //             <p className=\"prediction-price\">${prediction.predicted_close}</p>\n// // // // //             <small>（基于简单线性回归模型）</small>\n// // // // //           </div>\n// // // // //         )}\n// // // // //       </section>\n\n// // // // //       <section className=\"news-section\">\n// // // // //         {news && (\n// // // // //           <>\n// // // // //             <div className=\"news-list-container\">\n// // // // //               <h3>最新资讯</h3>\n// // // // //               {news.news_items.map(item => (\n// // // // //                 <div key={item.id} className=\"news-item\">\n// // // // //                   <p className=\"news-title\">{item.title}</p>\n// // // // //                   <p className=\"news-date\">{item.date}</p>\n// // // // //                   <p className=\"news-summary\">{item.summary}</p>\n// // // // //                 </div>\n// // // // //               ))}\n// // // // //             </div>\n// // // // //             <div className=\"news-summary-container\">\n// // // // //               <h3>近期资讯总结</h3>\n// // // // //               <p>{news.summary}</p>\n// // // // //             </div>\n// // // // //           </>\n// // // // //         )}\n// // // // //       </section>\n// // // // //     </div>\n// // // // //   );\n// // // // // }\n\n// // // // // export default StockDetails;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import { useParams } from 'react-router-dom';\n// // // // import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// // // // function StockDetails() {\n// // // //   const { ticker } = useParams();\n// // // //   const [data, setData] = useState(null);\n// // // //   const [error, setError] = useState(null);\n// // // //   const [loading, setLoading] = useState(true);\n\n// // // //   useEffect(() => {\n// // // //     // 只请求后端存在的唯一数据接口 /api/stocks/<ticker>\n// // // //     fetch(`/api/stocks/${ticker}`)\n// // // //       .then(res => {\n// // // //         if (!res.ok) {\n// // // //           // 如果服务器返回了错误状态 (如 404, 500), 先抛出错误\n// // // //           throw new Error(`服务器错误: ${res.status}`);\n// // // //         }\n// // // //         return res.json();\n// // // //       })\n// // // //       .then(fetchedData => {\n// // // //         // 检查后端返回的数据里是否包含我们自定义的错误信息\n// // // //         if (fetchedData.error) {\n// // // //           throw new Error(fetchedData.error);\n// // // //         }\n// // // //         setData(fetchedData);\n// // // //         setLoading(false);\n// // // //       })\n// // // //       .catch(err => {\n// // // //         // 捕获所有类型的错误 (网络错误, 解析错误, 后端返回的错误)\n// // // //         console.error(`获取股票详情失败 (${ticker}):`, err);\n// // // //         setError(`获取数据失败: ${err.message}`);\n// // // //         setLoading(false);\n// // // //       });\n// // // //   }, [ticker]); // 每当 ticker 变化时，重新获取数据\n\n// // // //   if (loading) {\n// // // //     return <div>正在为 {ticker} 加载数据...</div>;\n// // // //   }\n\n// // // //   if (error) {\n// // // //     return <div>错误: {error}</div>;\n// // // //   }\n\n// // // //   if (!data || !data.history) {\n// // // //     return <div>没有找到 {ticker} 的历史数据。</div>;\n// // // //   }\n\n// // // //   return (\n// // // //     <div style={{ width: '90%', height: '500px', margin: 'auto' }}>\n// // // //       <h2>{data.name} ({data.ticker}) 历史价格 (1年)</h2>\n// // // //       <ResponsiveContainer>\n// // // //         <LineChart\n// // // //           data={data.history}\n// // // //           margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n// // // //         >\n// // // //           <CartesianGrid strokeDasharray=\"3 3\" />\n// // // //           <XAxis dataKey=\"Date\" />\n// // // //           <YAxis domain={['auto', 'auto']} />\n// // // //           <Tooltip />\n// // // //           <Legend />\n// // // //           <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" name=\"收盘价\" />\n// // // //         </LineChart>\n// // // //       </ResponsiveContainer>\n// // // //     </div>\n// // // //   );\n// // // // }\n\n// // // // export default StockDetails;\n\n// // // // frontend/src/components/StockDetails.js (最终版)\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import { useParams } from 'react-router-dom';\n// // // import { Line } from 'react-chartjs-2';\n// // // // 1. 引入 Chart.js 的必要组件，这是标准做法\n// // // import {\n// // //   Chart as ChartJS,\n// // //   CategoryScale,\n// // //   LinearScale,\n// // //   PointElement,\n// // //   LineElement,\n// // //   Title,\n// // //   Tooltip,\n// // //   Legend,\n// // // } from 'chart.js';\n\n// // // // 2. 注册这些组件\n// // // ChartJS.register(\n// // //   CategoryScale,\n// // //   LinearScale,\n// // //   PointElement,\n// // //   LineElement,\n// // //   Title,\n// // //   Tooltip,\n// // //   Legend\n// // // );\n\n// // // function StockDetails() {\n// // //     const { ticker } = useParams();\n// // //     const [stockData, setStockData] = useState(null);\n// // //     const [error, setError] = useState(null);\n// // //     const [loading, setLoading] = useState(true);\n\n// // //     // 3. 新增一个专门用于图表的状态\n// // //     const [chartData, setChartData] = useState(null);\n\n// // //     useEffect(() => {\n// // //         setLoading(true);\n// // //         fetch(`/api/stocks/${ticker}`)\n// // //             .then(response => {\n// // //                 if (!response.ok) {\n// // //                     throw new Error(`服务器错误: ${response.status}`);\n// // //                 }\n// // //                 return response.json();\n// // //             })\n// // //             .then(data => {\n// // //                 if (data.error) {\n// // //                     throw new Error(data.error);\n// // //                 }\n// // //                 setStockData(data);\n\n// // //                 // 4. --- 这是核心改动：转换数据 ---\n// // //                 // 确认我们有历史数据\n// // //                 if (data.history && data.history.length > 0) {\n// // //                     // 准备图表数据\n// // //                     const newChartData = {\n// // //                         labels: data.history.map(item => item.date), // X轴：所有日期\n// // //                         datasets: [\n// // //                             {\n// // //                                 label: '收盘价', // 图例标签\n// // //                                 data: data.history.map(item => item.close), // Y轴：所有收盘价\n// // //                                 borderColor: 'rgb(75, 192, 192)',\n// // //                                 tension: 0.1\n// // //                             }\n// // //                         ]\n// // //                     };\n// // //                     setChartData(newChartData); // 设置格式化好的图表数据\n// // //                 }\n// // //             })\n// // //             .catch(err => {\n// // //                 console.error(`获取股票详情失败 (${ticker}):`, err);\n// // //                 setError(`获取数据失败: ${err.message}`);\n// // //             })\n// // //             .finally(() => {\n// // //                 setLoading(false);\n// // //             });\n// // //     }, [ticker]);\n\n// // //     if (loading) {\n// // //         return <div>正在加载 {ticker} 的数据...</div>;\n// // //     }\n\n// // //     if (error) {\n// // //         return <div>错误: {error}</div>;\n// // //     }\n\n// // //     if (!stockData) {\n// // //         return <div>没有找到该股票的数据。</div>;\n// // //     }\n\n// // //     return (\n// // //         <div>\n// // //             <h2>{stockData.name} ({stockData.ticker}) 历史价格 (1年)</h2>\n// // //             <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n// // //                 {/* 5. 确保 chartData 准备好之后再渲染图表 */}\n// // //                 {chartData ? (\n// // //                     <Line \n// // //                         data={chartData} \n// // //                         options={{\n// // //                             responsive: true,\n// // //                             plugins: {\n// // //                                 legend: {\n// // //                                     position: 'top',\n// // //                                 },\n// // //                                 title: {\n// // //                                     display: true,\n// // //                                     text: `${ticker} 过去一年价格走势`\n// // //                                 }\n// // //                             }\n// // //                         }}\n// // //                     />\n// // //                 ) : (\n// // //                     <div>正在准备图表...</div>\n// // //                 )}\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // }\n\n// // // export default StockDetails;\n\n// // // frontend/src/components/StockDetails.js (最终功能版：带预测图)\n\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { Line } from 'react-chartjs-2';\n// // import {\n// //   Chart as ChartJS,\n// //   CategoryScale,\n// //   LinearScale,\n// //   PointElement,\n// //   LineElement,\n// //   Title,\n// //   Tooltip,\n// //   Legend,\n// //   TimeScale, // 1. 引入TimeScale\n// // } from 'chart.js';\n// // import { Chart } from 'react-chartjs-2'; // 引入Chart\n// // // 2. 引入并使用日期适配器\n// // import 'chartjs-adapter-date-fns';\n\n// // ChartJS.register(\n// //   CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale // 3. 注册TimeScale\n// // );\n\n// // // 预设一些好看的颜色给不同的模型\n// // const modelColors = [\n// //     'rgba(255, 99, 132, 1)', // 红色\n// //     'rgba(54, 162, 235, 1)', // 蓝色\n// //     'rgba(255, 206, 86, 1)', // 黄色\n// // ];\n\n// // function StockDetails() {\n// //     const { ticker } = useParams();\n// //     const [chartData, setChartData] = useState(null);\n// //     const [error, setError] = useState(null);\n// //     const [loading, setLoading] = useState(true);\n\n// //     useEffect(() => {\n// //         setLoading(true);\n// //         fetch(`/api/stocks/${ticker}`)\n// //             .then(response => response.ok ? response.json() : Promise.reject(`服务器错误: ${response.status}`))\n// //             .then(data => {\n// //                 if (data.error) return Promise.reject(data.error);\n\n// //                 // --- 4. 核心改动：合并历史和预测数据 ---\n// //                 const historyDataset = {\n// //                     label: '收盘价',\n// //                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n// //                     borderColor: 'rgb(75, 192, 192)',\n// //                     tension: 0.1\n// //                 };\n\n// //                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n// //                     label: `${modelName} 预测`,\n// //                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n// //                     borderColor: modelColors[index % modelColors.length],\n// //                     backgroundColor: modelColors[index % modelColors.length],\n// //                     showLine: false, // 不画预测线\n// //                     pointRadius: 6, // 让预测点更明显\n// //                 }));\n\n// //                 setChartData({\n// //                     datasets: [historyDataset, ...predictionDatasets],\n// //                 });\n// //             })\n// //             .catch(err => {\n// //                 console.error(`获取股票详情失败 (${ticker}):`, err);\n// //                 setError(`获取数据失败: ${err.toString()}`);\n// //             })\n// //             .finally(() => setLoading(false));\n// //     }, [ticker]);\n\n// //     if (loading) return <div>正在加载 {ticker} 的数据...</div>;\n// //     if (error) return <div>错误: {error}</div>;\n\n// //     return (\n// //         <div>\n// //             <h2>{ticker} 历史价格与模型预测</h2>\n// //             <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n// //                 {chartData ? (\n// //                     <Chart type='line' // 使用通用的Chart组件\n// //                         data={chartData} \n// //                         options={{\n// //                             responsive: true,\n// //                             plugins: {\n// //                                 legend: { position: 'top' },\n// //                                 title: { display: true, text: `${ticker} 价格走势与预测` }\n// //                             },\n// //                             scales: { // 5. 明确告诉图表X轴是时间类型\n// //                                 x: {\n// //                                     type: 'time',\n// //                                     time: {\n// //                                         unit: 'day',\n// //                                         tooltipFormat: 'yyyy-MM-dd',\n// //                                     },\n// //                                     title: { display: true, text: '日期' }\n// //                                 },\n// //                                 y: {\n// //                                     title: { display: true, text: '价格' }\n// //                                 }\n// //                             }\n// //                         }}\n// //                     />\n// //                 ) : <div>正在准备图表...</div>}\n// //             </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default StockDetails;\n\n// // frontend/src/components/StockDetails.js (清理版)\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import {\n//   Chart as ChartJS, CategoryScale, LinearScale, PointElement,\n//   Title, Tooltip, Legend, TimeScale, LineElement // <--- 'LineElement' 是需要的，我之前的注释有误，保留它\n// } from 'chart.js';\n// import { Chart } from 'react-chartjs-2';\n// import 'chartjs-adapter-date-fns';\n\n// // 'LineElement' 是绘制线条所必需的，所以我们注册它\n// ChartJS.register(\n//   CategoryScale, LinearScale, PointElement, LineElement, // 确保 LineElement 在这里\n//   Title, Tooltip, Legend, TimeScale\n// );\n\n// // ... (文件的其余部分与上一版本完全相同，无需修改) ...\n// // 为了完整性，这里是剩余的代码\n\n// const modelColors = [\n//     'rgba(255, 99, 132, 1)', // 红色\n//     'rgba(54, 162, 235, 1)', // 蓝色\n//     'rgba(255, 206, 86, 1)', // 黄色\n// ];\n\n// function StockDetails() {\n//     const { ticker } = useParams();\n//     const [chartData, setChartData] = useState(null);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n\n//     useEffect(() => {\n//         setLoading(true);\n//         fetch(`/api/stocks/${ticker}`)\n//             .then(response => response.ok ? response.json() : Promise.reject(`服务器错误: ${response.status}`))\n//             .then(data => {\n//                 if (data.error) return Promise.reject(data.error);\n\n//                 const historyDataset = {\n//                     label: '收盘价',\n//                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n//                     borderColor: 'rgb(75, 192, 192)',\n//                     tension: 0.1\n//                 };\n\n//                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n//                     label: `${modelName} 预测`,\n//                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n//                     borderColor: modelColors[index % modelColors.length],\n//                     backgroundColor: modelColors[index % modelColors.length],\n//                     showLine: false,\n//                     pointRadius: 6,\n//                 }));\n\n//                 setChartData({\n//                     datasets: [historyDataset, ...predictionDatasets],\n//                 });\n//             })\n//             .catch(err => {\n//                 console.error(`获取股票详情失败 (${ticker}):`, err);\n//                 setError(`获取数据失败: ${err.toString()}`);\n//             })\n//             .finally(() => setLoading(false));\n//     }, [ticker]);\n\n//     if (loading) return <div>正在加载 {ticker} 的数据...</div>;\n//     if (error) return <div>错误: {error}</div>;\n\n//     return (\n//         <div>\n//             <h2>{ticker} 历史价格与模型预测</h2>\n//             <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n//                 {chartData ? (\n//                     <Chart type='line'\n//                         data={chartData} \n//                         options={{\n//                             responsive: true,\n//                             plugins: {\n//                                 legend: { position: 'top' },\n//                                 title: { display: true, text: `${ticker} 价格走势与预测` }\n//                             },\n//                             scales: {\n//                                 x: {\n//                                     type: 'time',\n//                                     time: {\n//                                         unit: 'day',\n//                                         tooltipFormat: 'yyyy-MM-dd',\n//                                     },\n//                                     title: { display: true, text: '日期' }\n//                                 },\n//                                 y: {\n//                                     title: { display: true, text: '价格' }\n//                                 }\n//                             }\n//                         }}\n//                     />\n//                 ) : <div>正在准备图表...</div>}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default StockDetails;\n\n// frontend/src/components/StockDetails.js (完全修正版)\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Chart } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst modelColors = ['rgba(255, 99, 132, 1)',\n// Red\n'rgba(54, 162, 235, 1)',\n// Blue\n'rgba(255, 206, 86, 1)' // Yellow\n];\n\n// 将图表配置项提取出来，使代码更整洁\nconst chartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  // 允许图表不按原始比例缩放，更好地适应容器\n  plugins: {\n    legend: {\n      position: 'top'\n    },\n    title: {\n      display: true,\n      text: `价格走势与预测`\n    }\n  },\n  scales: {\n    x: {\n      type: 'time',\n      time: {\n        unit: 'day',\n        tooltipFormat: 'yyyy-MM-dd'\n      },\n      title: {\n        display: true,\n        text: '日期'\n      }\n    },\n    y: {\n      title: {\n        display: true,\n        text: '价格'\n      }\n    }\n  }\n};\nfunction StockDetails() {\n  _s();\n  const {\n    ticker\n  } = useParams();\n  const [chartData, setChartData] = useState(null);\n  const [news, setNews] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    setError(null); // 每次加载时重置错误状态\n\n    fetch(`/api/stocks/${ticker}`).then(response => {\n      if (!response.ok) {\n        return Promise.reject(`服务器错误: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      if (data.error) {\n        return Promise.reject(data.error);\n      }\n\n      // --- 这里是修正的关键：填充完整的图表数据处理逻辑 ---\n      const historyDataset = {\n        label: '收盘价',\n        data: data.history.map(item => ({\n          x: item.date,\n          y: item.close\n        })),\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.5)',\n        tension: 0.1\n      };\n      const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n        label: `${modelName} 预测`,\n        data: data.predictions[modelName].map(p => ({\n          x: p.date,\n          y: p.price\n        })),\n        borderColor: modelColors[index % modelColors.length],\n        backgroundColor: modelColors[index % modelColors.length],\n        showLine: false,\n        pointRadius: 6,\n        pointHoverRadius: 8\n      }));\n      setChartData({\n        datasets: [historyDataset, ...predictionDatasets]\n      });\n      setNews(data.news || []);\n    }).catch(err => {\n      console.error(`获取股票详情失败 (${ticker}):`, err);\n      setError(typeof err === 'string' ? err : '获取数据时发生未知错误。');\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [ticker]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [\"\\u6B63\\u5728\\u52A0\\u8F7D \", ticker, \" \\u7684\\u6570\\u636E...\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 665,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: '#ff4d4d',\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [\"\\u9519\\u8BEF: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 666,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [ticker, \" \\u5386\\u53F2\\u4EF7\\u683C\\u4E0E\\u6A21\\u578B\\u9884\\u6D4B\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'relative',\n            height: '400px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Chart, {\n            type: \"line\",\n            data: chartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u6B63\\u5728\\u51C6\\u5907\\u56FE\\u8868...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"news-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u76F8\\u5173\\u65B0\\u95FB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"news-list\",\n          children: news.length > 0 ? news.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"news-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.summary\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: new Date(item.date).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 33\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u6682\\u65E0\\u76F8\\u5173\\u65B0\\u95FB\\u3002\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 669,\n    columnNumber: 9\n  }, this);\n}\n_s(StockDetails, \"iFY36zU69/1PWqBi69IH2u7tmsg=\", false, function () {\n  return [useParams];\n});\n_c = StockDetails;\nexport default StockDetails;\nvar _c;\n$RefreshReg$(_c, \"StockDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","jsxDEV","_jsxDEV","register","modelColors","chartOptions","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","scales","x","type","time","unit","tooltipFormat","y","StockDetails","_s","ticker","chartData","setChartData","news","setNews","error","setError","loading","setLoading","fetch","then","response","ok","Promise","reject","status","json","data","historyDataset","label","history","map","item","date","close","borderColor","backgroundColor","tension","predictionDatasets","Object","keys","predictions","modelName","index","p","price","length","showLine","pointRadius","pointHoverRadius","datasets","catch","err","console","finally","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","color","className","height","options","summary","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js"],"sourcesContent":["// // // // // import React, { useState, useEffect } from 'react';\n// // // // // import { useParams } from 'react-router-dom';\n// // // // // import { Line } from 'react-chartjs-2';\n// // // // // import {\n// // // // //   Chart as ChartJS,\n// // // // //   CategoryScale,\n// // // // //   LinearScale,\n// // // // //   PointElement,\n// // // // //   LineElement,\n// // // // //   Title,\n// // // // //   Tooltip,\n// // // // //   Legend,\n// // // // // } from 'chart.js';\n\n// // // // // ChartJS.register(\n// // // // //   CategoryScale,\n// // // // //   LinearScale,\n// // // // //   PointElement,\n// // // // //   LineElement,\n// // // // //   Title,\n// // // // //   Tooltip,\n// // // // //   Legend\n// // // // // );\n\n// // // // // function StockDetails() {\n// // // // //   const { ticker } = useParams();\n// // // // //   const [stockData, setStockData] = useState(null);\n// // // // //   const [news, setNews] = useState(null);\n// // // // //   const [prediction, setPrediction] = useState(null);\n// // // // //   const [loading, setLoading] = useState(true);\n// // // // //   const [error, setError] = useState(null);\n\n// // // // //   useEffect(() => {\n// // // // //     const fetchData = async () => {\n// // // // //       setLoading(true);\n// // // // //       setError(null);\n// // // // //       try {\n// // // // //         const [detailsRes, newsRes, predictionRes] = await Promise.all([\n// // // // //           fetch(`/api/stocks/${ticker}`),\n// // // // //           fetch(`/api/stocks/${ticker}/news`),\n// // // // //           fetch(`/api/predict/${ticker}`),\n// // // // //         ]);\n\n// // // // //         if (!detailsRes.ok || !newsRes.ok || !predictionRes.ok) {\n// // // // //           throw new Error('获取数据失败');\n// // // // //         }\n\n// // // // //         const detailsData = await detailsRes.json();\n// // // // //         const newsData = await newsRes.json();\n// // // // //         const predictionData = await predictionRes.json();\n\n// // // // //         setStockData(detailsData);\n// // // // //         setNews(newsData);\n// // // // //         setPrediction(predictionData);\n// // // // //       } catch (err) {\n// // // // //         setError(err.message);\n// // // // //       } finally {\n// // // // //         setLoading(false);\n// // // // //       }\n// // // // //     };\n\n// // // // //     fetchData();\n// // // // //   }, [ticker]);\n\n// // // // //   if (loading) return <div className=\"loading\">正在加载股票数据...</div>;\n// // // // //   if (error) return <div className=\"error\">错误: {error}</div>;\n// // // // //   if (!stockData) return null;\n\n// // // // //   const chartData = {\n// // // // //     labels: stockData.map(data => data.date),\n// // // // //     datasets: [\n// // // // //       {\n// // // // //         label: `${ticker} 收盘价`,\n// // // // //         data: stockData.map(data => data.close),\n// // // // //         borderColor: 'rgb(75, 192, 192)',\n// // // // //         backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// // // // //       },\n// // // // //     ],\n// // // // //   };\n\n// // // // //   const chartOptions = {\n// // // // //     responsive: true,\n// // // // //     plugins: {\n// // // // //       legend: {\n// // // // //         position: 'top',\n// // // // //       },\n// // // // //       title: {\n// // // // //         display: true,\n// // // // //         text: `${ticker} 股价走势`,\n// // // // //       },\n// // // // //       tooltip: {\n// // // // //         callbacks: {\n// // // // //           label: function (context) {\n// // // // //             const index = context.dataIndex;\n// // // // //             const dataPoint = stockData[index];\n// // // // //             if (!dataPoint) return '';\n// // // // //             return [\n// // // // //               `收盘: ${dataPoint.close.toFixed(2)}`,\n// // // // //               `开盘: ${dataPoint.open.toFixed(2)}`,\n// // // // //               `最高: ${dataPoint.high.toFixed(2)}`,\n// // // // //               `最低: ${dataPoint.low.toFixed(2)}`,\n// // // // //             ];\n// // // // //           },\n// // // // //         },\n// // // // //       },\n// // // // //     },\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"stock-details-container\">\n// // // // //       <h2>{ticker} - 股票详情</h2>\n      \n// // // // //       <section className=\"chart-prediction-section\">\n// // // // //         <div className=\"chart-container\">\n// // // // //           <Line options={chartOptions} data={chartData} />\n// // // // //         </div>\n        \n// // // // //         {prediction && (\n// // // // //           <div className=\"prediction-container\">\n// // // // //             <h3>模型预测明日收盘价</h3>\n// // // // //             <p className=\"prediction-price\">${prediction.predicted_close}</p>\n// // // // //             <small>（基于简单线性回归模型）</small>\n// // // // //           </div>\n// // // // //         )}\n// // // // //       </section>\n\n// // // // //       <section className=\"news-section\">\n// // // // //         {news && (\n// // // // //           <>\n// // // // //             <div className=\"news-list-container\">\n// // // // //               <h3>最新资讯</h3>\n// // // // //               {news.news_items.map(item => (\n// // // // //                 <div key={item.id} className=\"news-item\">\n// // // // //                   <p className=\"news-title\">{item.title}</p>\n// // // // //                   <p className=\"news-date\">{item.date}</p>\n// // // // //                   <p className=\"news-summary\">{item.summary}</p>\n// // // // //                 </div>\n// // // // //               ))}\n// // // // //             </div>\n// // // // //             <div className=\"news-summary-container\">\n// // // // //               <h3>近期资讯总结</h3>\n// // // // //               <p>{news.summary}</p>\n// // // // //             </div>\n// // // // //           </>\n// // // // //         )}\n// // // // //       </section>\n// // // // //     </div>\n// // // // //   );\n// // // // // }\n\n// // // // // export default StockDetails;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import { useParams } from 'react-router-dom';\n// // // // import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// // // // function StockDetails() {\n// // // //   const { ticker } = useParams();\n// // // //   const [data, setData] = useState(null);\n// // // //   const [error, setError] = useState(null);\n// // // //   const [loading, setLoading] = useState(true);\n\n// // // //   useEffect(() => {\n// // // //     // 只请求后端存在的唯一数据接口 /api/stocks/<ticker>\n// // // //     fetch(`/api/stocks/${ticker}`)\n// // // //       .then(res => {\n// // // //         if (!res.ok) {\n// // // //           // 如果服务器返回了错误状态 (如 404, 500), 先抛出错误\n// // // //           throw new Error(`服务器错误: ${res.status}`);\n// // // //         }\n// // // //         return res.json();\n// // // //       })\n// // // //       .then(fetchedData => {\n// // // //         // 检查后端返回的数据里是否包含我们自定义的错误信息\n// // // //         if (fetchedData.error) {\n// // // //           throw new Error(fetchedData.error);\n// // // //         }\n// // // //         setData(fetchedData);\n// // // //         setLoading(false);\n// // // //       })\n// // // //       .catch(err => {\n// // // //         // 捕获所有类型的错误 (网络错误, 解析错误, 后端返回的错误)\n// // // //         console.error(`获取股票详情失败 (${ticker}):`, err);\n// // // //         setError(`获取数据失败: ${err.message}`);\n// // // //         setLoading(false);\n// // // //       });\n// // // //   }, [ticker]); // 每当 ticker 变化时，重新获取数据\n\n// // // //   if (loading) {\n// // // //     return <div>正在为 {ticker} 加载数据...</div>;\n// // // //   }\n\n// // // //   if (error) {\n// // // //     return <div>错误: {error}</div>;\n// // // //   }\n\n// // // //   if (!data || !data.history) {\n// // // //     return <div>没有找到 {ticker} 的历史数据。</div>;\n// // // //   }\n\n// // // //   return (\n// // // //     <div style={{ width: '90%', height: '500px', margin: 'auto' }}>\n// // // //       <h2>{data.name} ({data.ticker}) 历史价格 (1年)</h2>\n// // // //       <ResponsiveContainer>\n// // // //         <LineChart\n// // // //           data={data.history}\n// // // //           margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n// // // //         >\n// // // //           <CartesianGrid strokeDasharray=\"3 3\" />\n// // // //           <XAxis dataKey=\"Date\" />\n// // // //           <YAxis domain={['auto', 'auto']} />\n// // // //           <Tooltip />\n// // // //           <Legend />\n// // // //           <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" name=\"收盘价\" />\n// // // //         </LineChart>\n// // // //       </ResponsiveContainer>\n// // // //     </div>\n// // // //   );\n// // // // }\n\n// // // // export default StockDetails;\n\n\n// // // // frontend/src/components/StockDetails.js (最终版)\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import { useParams } from 'react-router-dom';\n// // // import { Line } from 'react-chartjs-2';\n// // // // 1. 引入 Chart.js 的必要组件，这是标准做法\n// // // import {\n// // //   Chart as ChartJS,\n// // //   CategoryScale,\n// // //   LinearScale,\n// // //   PointElement,\n// // //   LineElement,\n// // //   Title,\n// // //   Tooltip,\n// // //   Legend,\n// // // } from 'chart.js';\n\n// // // // 2. 注册这些组件\n// // // ChartJS.register(\n// // //   CategoryScale,\n// // //   LinearScale,\n// // //   PointElement,\n// // //   LineElement,\n// // //   Title,\n// // //   Tooltip,\n// // //   Legend\n// // // );\n\n// // // function StockDetails() {\n// // //     const { ticker } = useParams();\n// // //     const [stockData, setStockData] = useState(null);\n// // //     const [error, setError] = useState(null);\n// // //     const [loading, setLoading] = useState(true);\n    \n// // //     // 3. 新增一个专门用于图表的状态\n// // //     const [chartData, setChartData] = useState(null);\n\n// // //     useEffect(() => {\n// // //         setLoading(true);\n// // //         fetch(`/api/stocks/${ticker}`)\n// // //             .then(response => {\n// // //                 if (!response.ok) {\n// // //                     throw new Error(`服务器错误: ${response.status}`);\n// // //                 }\n// // //                 return response.json();\n// // //             })\n// // //             .then(data => {\n// // //                 if (data.error) {\n// // //                     throw new Error(data.error);\n// // //                 }\n// // //                 setStockData(data);\n\n// // //                 // 4. --- 这是核心改动：转换数据 ---\n// // //                 // 确认我们有历史数据\n// // //                 if (data.history && data.history.length > 0) {\n// // //                     // 准备图表数据\n// // //                     const newChartData = {\n// // //                         labels: data.history.map(item => item.date), // X轴：所有日期\n// // //                         datasets: [\n// // //                             {\n// // //                                 label: '收盘价', // 图例标签\n// // //                                 data: data.history.map(item => item.close), // Y轴：所有收盘价\n// // //                                 borderColor: 'rgb(75, 192, 192)',\n// // //                                 tension: 0.1\n// // //                             }\n// // //                         ]\n// // //                     };\n// // //                     setChartData(newChartData); // 设置格式化好的图表数据\n// // //                 }\n// // //             })\n// // //             .catch(err => {\n// // //                 console.error(`获取股票详情失败 (${ticker}):`, err);\n// // //                 setError(`获取数据失败: ${err.message}`);\n// // //             })\n// // //             .finally(() => {\n// // //                 setLoading(false);\n// // //             });\n// // //     }, [ticker]);\n\n// // //     if (loading) {\n// // //         return <div>正在加载 {ticker} 的数据...</div>;\n// // //     }\n\n// // //     if (error) {\n// // //         return <div>错误: {error}</div>;\n// // //     }\n\n// // //     if (!stockData) {\n// // //         return <div>没有找到该股票的数据。</div>;\n// // //     }\n\n// // //     return (\n// // //         <div>\n// // //             <h2>{stockData.name} ({stockData.ticker}) 历史价格 (1年)</h2>\n// // //             <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n// // //                 {/* 5. 确保 chartData 准备好之后再渲染图表 */}\n// // //                 {chartData ? (\n// // //                     <Line \n// // //                         data={chartData} \n// // //                         options={{\n// // //                             responsive: true,\n// // //                             plugins: {\n// // //                                 legend: {\n// // //                                     position: 'top',\n// // //                                 },\n// // //                                 title: {\n// // //                                     display: true,\n// // //                                     text: `${ticker} 过去一年价格走势`\n// // //                                 }\n// // //                             }\n// // //                         }}\n// // //                     />\n// // //                 ) : (\n// // //                     <div>正在准备图表...</div>\n// // //                 )}\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // }\n\n// // // export default StockDetails;\n\n// // // frontend/src/components/StockDetails.js (最终功能版：带预测图)\n\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { Line } from 'react-chartjs-2';\n// // import {\n// //   Chart as ChartJS,\n// //   CategoryScale,\n// //   LinearScale,\n// //   PointElement,\n// //   LineElement,\n// //   Title,\n// //   Tooltip,\n// //   Legend,\n// //   TimeScale, // 1. 引入TimeScale\n// // } from 'chart.js';\n// // import { Chart } from 'react-chartjs-2'; // 引入Chart\n// // // 2. 引入并使用日期适配器\n// // import 'chartjs-adapter-date-fns';\n\n// // ChartJS.register(\n// //   CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale // 3. 注册TimeScale\n// // );\n\n// // // 预设一些好看的颜色给不同的模型\n// // const modelColors = [\n// //     'rgba(255, 99, 132, 1)', // 红色\n// //     'rgba(54, 162, 235, 1)', // 蓝色\n// //     'rgba(255, 206, 86, 1)', // 黄色\n// // ];\n\n// // function StockDetails() {\n// //     const { ticker } = useParams();\n// //     const [chartData, setChartData] = useState(null);\n// //     const [error, setError] = useState(null);\n// //     const [loading, setLoading] = useState(true);\n\n// //     useEffect(() => {\n// //         setLoading(true);\n// //         fetch(`/api/stocks/${ticker}`)\n// //             .then(response => response.ok ? response.json() : Promise.reject(`服务器错误: ${response.status}`))\n// //             .then(data => {\n// //                 if (data.error) return Promise.reject(data.error);\n\n// //                 // --- 4. 核心改动：合并历史和预测数据 ---\n// //                 const historyDataset = {\n// //                     label: '收盘价',\n// //                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n// //                     borderColor: 'rgb(75, 192, 192)',\n// //                     tension: 0.1\n// //                 };\n\n// //                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n// //                     label: `${modelName} 预测`,\n// //                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n// //                     borderColor: modelColors[index % modelColors.length],\n// //                     backgroundColor: modelColors[index % modelColors.length],\n// //                     showLine: false, // 不画预测线\n// //                     pointRadius: 6, // 让预测点更明显\n// //                 }));\n\n// //                 setChartData({\n// //                     datasets: [historyDataset, ...predictionDatasets],\n// //                 });\n// //             })\n// //             .catch(err => {\n// //                 console.error(`获取股票详情失败 (${ticker}):`, err);\n// //                 setError(`获取数据失败: ${err.toString()}`);\n// //             })\n// //             .finally(() => setLoading(false));\n// //     }, [ticker]);\n\n// //     if (loading) return <div>正在加载 {ticker} 的数据...</div>;\n// //     if (error) return <div>错误: {error}</div>;\n\n// //     return (\n// //         <div>\n// //             <h2>{ticker} 历史价格与模型预测</h2>\n// //             <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n// //                 {chartData ? (\n// //                     <Chart type='line' // 使用通用的Chart组件\n// //                         data={chartData} \n// //                         options={{\n// //                             responsive: true,\n// //                             plugins: {\n// //                                 legend: { position: 'top' },\n// //                                 title: { display: true, text: `${ticker} 价格走势与预测` }\n// //                             },\n// //                             scales: { // 5. 明确告诉图表X轴是时间类型\n// //                                 x: {\n// //                                     type: 'time',\n// //                                     time: {\n// //                                         unit: 'day',\n// //                                         tooltipFormat: 'yyyy-MM-dd',\n// //                                     },\n// //                                     title: { display: true, text: '日期' }\n// //                                 },\n// //                                 y: {\n// //                                     title: { display: true, text: '价格' }\n// //                                 }\n// //                             }\n// //                         }}\n// //                     />\n// //                 ) : <div>正在准备图表...</div>}\n// //             </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default StockDetails;\n\n// // frontend/src/components/StockDetails.js (清理版)\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import {\n//   Chart as ChartJS, CategoryScale, LinearScale, PointElement,\n//   Title, Tooltip, Legend, TimeScale, LineElement // <--- 'LineElement' 是需要的，我之前的注释有误，保留它\n// } from 'chart.js';\n// import { Chart } from 'react-chartjs-2';\n// import 'chartjs-adapter-date-fns';\n\n// // 'LineElement' 是绘制线条所必需的，所以我们注册它\n// ChartJS.register(\n//   CategoryScale, LinearScale, PointElement, LineElement, // 确保 LineElement 在这里\n//   Title, Tooltip, Legend, TimeScale\n// );\n\n// // ... (文件的其余部分与上一版本完全相同，无需修改) ...\n// // 为了完整性，这里是剩余的代码\n\n// const modelColors = [\n//     'rgba(255, 99, 132, 1)', // 红色\n//     'rgba(54, 162, 235, 1)', // 蓝色\n//     'rgba(255, 206, 86, 1)', // 黄色\n// ];\n\n// function StockDetails() {\n//     const { ticker } = useParams();\n//     const [chartData, setChartData] = useState(null);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n\n//     useEffect(() => {\n//         setLoading(true);\n//         fetch(`/api/stocks/${ticker}`)\n//             .then(response => response.ok ? response.json() : Promise.reject(`服务器错误: ${response.status}`))\n//             .then(data => {\n//                 if (data.error) return Promise.reject(data.error);\n\n//                 const historyDataset = {\n//                     label: '收盘价',\n//                     data: data.history.map(item => ({ x: item.date, y: item.close })),\n//                     borderColor: 'rgb(75, 192, 192)',\n//                     tension: 0.1\n//                 };\n\n//                 const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n//                     label: `${modelName} 预测`,\n//                     data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n//                     borderColor: modelColors[index % modelColors.length],\n//                     backgroundColor: modelColors[index % modelColors.length],\n//                     showLine: false,\n//                     pointRadius: 6,\n//                 }));\n\n//                 setChartData({\n//                     datasets: [historyDataset, ...predictionDatasets],\n//                 });\n//             })\n//             .catch(err => {\n//                 console.error(`获取股票详情失败 (${ticker}):`, err);\n//                 setError(`获取数据失败: ${err.toString()}`);\n//             })\n//             .finally(() => setLoading(false));\n//     }, [ticker]);\n\n//     if (loading) return <div>正在加载 {ticker} 的数据...</div>;\n//     if (error) return <div>错误: {error}</div>;\n\n//     return (\n//         <div>\n//             <h2>{ticker} 历史价格与模型预测</h2>\n//             <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n//                 {chartData ? (\n//                     <Chart type='line'\n//                         data={chartData} \n//                         options={{\n//                             responsive: true,\n//                             plugins: {\n//                                 legend: { position: 'top' },\n//                                 title: { display: true, text: `${ticker} 价格走势与预测` }\n//                             },\n//                             scales: {\n//                                 x: {\n//                                     type: 'time',\n//                                     time: {\n//                                         unit: 'day',\n//                                         tooltipFormat: 'yyyy-MM-dd',\n//                                     },\n//                                     title: { display: true, text: '日期' }\n//                                 },\n//                                 y: {\n//                                     title: { display: true, text: '价格' }\n//                                 }\n//                             }\n//                         }}\n//                     />\n//                 ) : <div>正在准备图表...</div>}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default StockDetails;\n\n\n// frontend/src/components/StockDetails.js (完全修正版)\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Chart } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n  Title, Tooltip, Legend, TimeScale\n} from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\nChartJS.register(\n  CategoryScale, LinearScale, PointElement, LineElement,\n  Title, Tooltip, Legend, TimeScale\n);\n\nconst modelColors = [\n    'rgba(255, 99, 132, 1)', // Red\n    'rgba(54, 162, 235, 1)', // Blue\n    'rgba(255, 206, 86, 1)', // Yellow\n];\n\n// 将图表配置项提取出来，使代码更整洁\nconst chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false, // 允许图表不按原始比例缩放，更好地适应容器\n    plugins: {\n        legend: { position: 'top' },\n        title: { display: true, text: `价格走势与预测` }\n    },\n    scales: {\n        x: {\n            type: 'time',\n            time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n            title: { display: true, text: '日期' }\n        },\n        y: {\n            title: { display: true, text: '价格' }\n        }\n    }\n};\n\nfunction StockDetails() {\n    const { ticker } = useParams();\n    const [chartData, setChartData] = useState(null);\n    const [news, setNews] = useState([]);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        setLoading(true);\n        setError(null); // 每次加载时重置错误状态\n        \n        fetch(`/api/stocks/${ticker}`)\n            .then(response => {\n                if (!response.ok) {\n                    return Promise.reject(`服务器错误: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                if (data.error) {\n                    return Promise.reject(data.error);\n                }\n\n                // --- 这里是修正的关键：填充完整的图表数据处理逻辑 ---\n                const historyDataset = {\n                    label: '收盘价',\n                    data: data.history.map(item => ({ x: item.date, y: item.close })),\n                    borderColor: 'rgb(75, 192, 192)',\n                    backgroundColor: 'rgba(75, 192, 192, 0.5)',\n                    tension: 0.1\n                };\n\n                const predictionDatasets = Object.keys(data.predictions).map((modelName, index) => ({\n                    label: `${modelName} 预测`,\n                    data: data.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n                    borderColor: modelColors[index % modelColors.length],\n                    backgroundColor: modelColors[index % modelColors.length],\n                    showLine: false,\n                    pointRadius: 6,\n                    pointHoverRadius: 8,\n                }));\n\n                setChartData({\n                    datasets: [historyDataset, ...predictionDatasets],\n                });\n\n                setNews(data.news || []);\n\n            })\n            .catch(err => {\n                console.error(`获取股票详情失败 (${ticker}):`, err);\n                setError(typeof err === 'string' ? err : '获取数据时发生未知错误。');\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [ticker]);\n\n    if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>正在加载 {ticker} 的数据...</div>;\n    if (error) return <div style={{ color: '#ff4d4d', textAlign: 'center', marginTop: '50px' }}>错误: {error}</div>;\n\n    return (\n        <div>\n            <h2>{ticker} 历史价格与模型预测</h2>\n            <div className=\"details-container\">\n                {/* 左侧图表容器 */}\n                <div className=\"chart-container\">\n                    {chartData ? (\n                        <div style={{ position: 'relative', height: '400px' }}>\n                             <Chart type='line' data={chartData} options={chartOptions} />\n                        </div>\n                    ) : (\n                        <div>正在准备图表...</div>\n                    )}\n                </div>\n                \n                {/* 右侧新闻容器 */}\n                <div className=\"news-container\">\n                    <h3>相关新闻</h3>\n                    <div className=\"news-list\">\n                        {news.length > 0 ? (\n                            news.map((item, index) => (\n                                <div key={index} className=\"news-item\">\n                                    <h4>{item.title}</h4>\n                                    <p>{item.summary}</p>\n                                    {/* 格式化日期，使其更友好 */}\n                                    <span>{new Date(item.date).toLocaleDateString()}</span>\n                                </div>\n                            ))\n                        ) : (\n                            <p>暂无相关新闻。</p>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default StockDetails;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}