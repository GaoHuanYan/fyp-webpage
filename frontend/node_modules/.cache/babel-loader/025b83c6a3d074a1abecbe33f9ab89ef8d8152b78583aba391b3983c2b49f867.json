{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/StockList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport HangSengChart from './HangSengChart';\nimport './../App.css';\n\n/**\n * Helper function: Formats the percentage change.\n * @param {number} change - The change value.\n * @returns {JSX.Element} - Returns a JSX element with color and sign.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatChange = change => {\n  // Handle the edge case where data is null or undefined.\n  if (change === null || change === undefined) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      children: \"N/A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Determine if the change is positive or negative.\n  const isPositive = parseFloat(change) >= 0;\n  // Define professional colors for gain (green) and loss (red).\n  const color = isPositive ? '#26a69a' : '#ef5350';\n  // Add a '+' sign for positive numbers.\n  const sign = isPositive ? '+' : '';\n  // Format as a percentage string with two decimal places.\n  const formattedChange = `${sign}${parseFloat(change).toFixed(2)}%`;\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      color,\n      fontWeight: 'bold'\n    },\n    children: formattedChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};\nfunction StockList() {\n  _s();\n  // Define component state\n  const [topMovers, setTopMovers] = useState([]); // Stores the Top 10 stock data\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  // Use useEffect to fetch data from the backend API when the component mounts.\n  useEffect(() => {\n    fetch('/api/top-movers').then(res => {\n      if (!res.ok) {\n        throw new Error('Failed to fetch top movers data from the server.');\n      }\n      return res.json();\n    }).then(data => {\n      setTopMovers(data);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Fetch error:\", error);\n      setError(error.message);\n      setLoading(false);\n    });\n  }, []); // The empty dependency array ensures this effect runs only once.\n\n  // Render different content based on the component's state (loading, error, success).\n  const renderContent = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: \"Loading AI Predicted Top 10 Movers...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 14\n      }, this);\n    }\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        style: {\n          color: '#ef5350'\n        },\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }, this);\n    }\n    if (topMovers.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-message\",\n        children: \"No prediction data available for today. Please run the prediction script.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }, this);\n    }\n\n    // After successfully fetching the data, render the list.\n    // The layout of this ul list is controlled by the 'top-movers-list' class in App.css (CSS Grid).\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"top-movers-list\",\n      children: topMovers.map((stock, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/stock/${stock.ticker}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ticker-name\",\n            children: [index === 0 && stock.change_percent >= 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"crown-icon\",\n              children: \"\\uD83D\\uDC51\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 62\n            }, this), stock.ticker]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ticker-change\",\n            children: formatChange(stock.change_percent)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, stock.ticker, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  };\n\n  // The final return content of the component.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(HangSengChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"divider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"list-title\",\n      children: \"AI Predicted Top 10 Movers for Next Trading Day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), renderContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(StockList, \"LyHP7co5z2VKnl6QrCu00gpggxM=\");\n_c = StockList;\nexport default StockList;\nvar _c;\n$RefreshReg$(_c, \"StockList\");","map":{"version":3,"names":["React","useState","useEffect","Link","HangSengChart","jsxDEV","_jsxDEV","formatChange","change","undefined","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","isPositive","parseFloat","sign","formattedChange","toFixed","fontWeight","StockList","_s","topMovers","setTopMovers","loading","setLoading","error","setError","fetch","then","res","ok","Error","json","data","catch","console","message","renderContent","className","length","map","stock","index","to","ticker","change_percent","_c","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/StockList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport HangSengChart from './HangSengChart'; \nimport './../App.css'; \n\n/**\n * Helper function: Formats the percentage change.\n * @param {number} change - The change value.\n * @returns {JSX.Element} - Returns a JSX element with color and sign.\n */\nconst formatChange = (change) => {\n  // Handle the edge case where data is null or undefined.\n  if (change === null || change === undefined) {\n    return <span style={{ color: 'gray' }}>N/A</span>;\n  }\n  \n  // Determine if the change is positive or negative.\n  const isPositive = parseFloat(change) >= 0;\n  // Define professional colors for gain (green) and loss (red).\n  const color = isPositive ? '#26a69a' : '#ef5350';\n  // Add a '+' sign for positive numbers.\n  const sign = isPositive ? '+' : '';\n  // Format as a percentage string with two decimal places.\n  const formattedChange = `${sign}${parseFloat(change).toFixed(2)}%`;\n\n  return <span style={{ color, fontWeight: 'bold' }}>{formattedChange}</span>;\n};\n\nfunction StockList() {\n  // Define component state\n  const [topMovers, setTopMovers] = useState([]); // Stores the Top 10 stock data\n  const [loading, setLoading] = useState(true);   // Loading state\n  const [error, setError] = useState(null);       // Error state\n\n  // Use useEffect to fetch data from the backend API when the component mounts.\n  useEffect(() => {\n    fetch('/api/top-movers')\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Failed to fetch top movers data from the server.');\n        }\n        return res.json();\n      })\n      .then(data => {\n        setTopMovers(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Fetch error:\", error);\n        setError(error.message);\n        setLoading(false);\n      });\n  }, []); // The empty dependency array ensures this effect runs only once.\n\n  // Render different content based on the component's state (loading, error, success).\n  const renderContent = () => {\n    if (loading) {\n      return <div className=\"loading-message\">Loading AI Predicted Top 10 Movers...</div>;\n    }\n    if (error) {\n      return <div className=\"error-message\" style={{ color: '#ef5350' }}>Error: {error}</div>;\n    }\n    if (topMovers.length === 0) {\n      return <div className=\"info-message\">No prediction data available for today. Please run the prediction script.</div>;\n    }\n    \n    // After successfully fetching the data, render the list.\n    // The layout of this ul list is controlled by the 'top-movers-list' class in App.css (CSS Grid).\n    return (\n      <ul className=\"top-movers-list\">\n        {topMovers.map((stock, index) => (\n          <li key={stock.ticker}>\n            <Link to={`/stock/${stock.ticker}`}>\n              <span className=\"ticker-name\">\n                \n                {/* === This is the modified core logic === */}\n                {/* Only display the crown if it's the first item and the change is positive. */}\n                {index === 0 && stock.change_percent >= 0 && <span className=\"crown-icon\">👑</span>}\n                \n                {stock.ticker}\n              </span>\n              <span className=\"ticker-change\">\n                {/* Use the helper function to format the displayed percentage change. */}\n                {formatChange(stock.change_percent)}\n              </span>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  // The final return content of the component.\n  return (\n    <div className=\"stock-list-container\">\n      <HangSengChart />\n      <hr className=\"divider\"/> \n      \n      <h2 className=\"list-title\">AI Predicted Top 10 Movers for Next Trading Day</h2>\n      \n      {/* Call the content rendering function. */}\n      {renderContent()}\n    </div>\n  );\n}\n\nexport default StockList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}