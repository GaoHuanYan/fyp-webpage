{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams, Link } from 'react-router-dom'; \n// // import { Chart } from 'react-chartjs-2';\n// // import {\n// //   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale\n// // } from 'chart.js';\n// // import 'chartjs-adapter-date-fns';\n\n// // ChartJS.register(\n// //   CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale\n// // );\n// // const modelColors = [\n// //     'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',\n// // ];\n// // const chartOptions = {\n// //     responsive: true,\n// //     maintainAspectRatio: false,\n// //     plugins: {\n// //         legend: { position: 'top', labels: { color: 'white' } },\n// //         title: { display: true, text: `Price Trends and Model Predictions`, color: 'white' }\n// //     },\n// //     scales: {\n// //         x: {\n// //             type: 'time',\n// //             time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n// //             title: { display: true, text: 'Date', color: 'white' },\n// //             ticks: { color: 'white' },\n// //             grid: { color: 'rgba(255, 255, 255, 0.1)' }\n// //         },\n// //         y: {\n// //             title: { display: true, text: 'Price', color: 'white' },\n// //             ticks: { color: 'white' },\n// //             grid: { color: 'rgba(255, 255, 255, 0.1)' }\n// //         }\n// //     }\n// // };\n\n// // function StockDetails() {\n// //     const { ticker } = useParams();\n// //     // Component State\n// //     const [chartData, setChartData] = useState(null);\n// //     const [news, setNews] = useState([]);\n// //     const [error, setError] = useState(null);\n// //     const [loading, setLoading] = useState(true);\n// //     const [isNewsExpanded, setIsNewsExpanded] = useState(false);\n\n// //     // State for the AI analysis feature\n// //     const [historicalData, setHistoricalData] = useState(null);\n// //     const [aiSummary, setAiSummary] = useState('');\n// //     const [isAiLoading, setIsAiLoading] = useState(true);\n\n// //     const toggleNews = () => setIsNewsExpanded(!isNewsExpanded);\n\n// //     // useEffect Hook: Fetches main stock data (history, predictions, news)\n// //     useEffect(() => {\n// //         // <-- Core Change: Use async/await for consistent style and improved error handling\n// //         async function fetchStockData() {\n// //             setLoading(true);\n// //             setError(null);\n// //             try {\n// //                 const response = await fetch(`/api/stocks/${ticker}`);\n// //                 // Always try to parse JSON, regardless of success\n// //                 const result = await response.json(); \n\n// //                 // If the HTTP response status is not OK (e.g., 404, 500), \n// //                 // throw the error message provided by the backend.\n// //                 if (!response.ok) {\n// //                     throw new Error(result.error || `Server error: ${response.status}`);\n// //                 }\n\n// //                 // --- Logic for successfully fetched data ---\n// //                 const historyDataset = {\n// //                     label: 'Close Price',\n// //                     data: result.history.map(item => ({ x: item.date, y: item.close })),\n// //                     borderColor: 'rgb(75, 192, 192)',\n// //                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// //                     tension: 0.1\n// //                 };\n// //                 const predictionDatasets = Object.keys(result.predictions).map((modelName, index) => ({\n// //                     label: `${modelName} Prediction`,\n// //                     data: result.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n// //                     borderColor: modelColors[index % modelColors.length],\n// //                     backgroundColor: modelColors[index % modelColors.length],\n// //                     showLine: false, pointRadius: 6, pointHoverRadius: 8,\n// //                 }));\n// //                 setChartData({ datasets: [historyDataset, ...predictionDatasets] });\n// //                 setNews(result.news || []);\n// //                 // Save historical data to trigger the AI analysis fetch\n// //                 setHistoricalData(result.history); \n\n// //             } catch (err) {\n// //                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n// //                 // Set the captured, more specific message to the error state\n// //                 setError(err.message); \n// //             } finally {\n// //                 setLoading(false);\n// //             }\n// //         }\n\n// //         fetchStockData();\n// //     }, [ticker]);\n\n// //     // useEffect Hook: Fetches the AI summary (this logic is solid and needs no major changes)\n// //     useEffect(() => {\n// //         if (!historicalData || historicalData.length === 0) return;\n\n// //         async function fetchAiSummary() {\n// //             setIsAiLoading(true);\n// //             try {\n// //                 const response = await fetch('/api/summarize', {\n// //                     method: 'POST',\n// //                     headers: { 'Content-Type': 'application/json' },\n// //                     body: JSON.stringify({ historicalData, ticker })\n// //                 });\n// //                 const result = await response.json();\n// //                 if (!response.ok) {\n// //                     throw new Error(result.error || 'Failed to get AI summary.');\n// //                 }\n// //                 setAiSummary(result.summary);\n// //             } catch (err) {\n// //                 console.error(\"AI summary fetch error:\", err);\n// //                 setAiSummary('Could not load AI analysis summary.');\n// //             } finally {\n// //                 setIsAiLoading(false);\n// //             }\n// //         }\n// //         fetchAiSummary();\n// //     }, [historicalData, ticker]);\n\n// //     // --- Render Logic ---\n// //     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n\n// //     // <-- Core Change: Use the new, more user-friendly error display component\n// //     if (error) {\n// //         return (\n// //             <div className=\"error-container\">\n// //                 <div className=\"error-icon\">⚠️</div>\n// //                 <h2>Could not load stock data</h2>\n// //                 <p className=\"error-message\">{error}</p>\n// //                 <Link to=\"/\" className=\"home-button\">\n// //                     Back to Home\n// //                 </Link>\n// //             </div>\n// //         );\n// //     }\n\n// //     // Render logic for when data is successfully fetched\n// //     return (\n// //         <div className=\"stock-details-page-container\">\n// //             <h2 className=\"stock-details-subtitle\">\n// //                 {ticker} Historical Prices and Model Predictions\n// //             </h2>\n\n// //             <div className=\"details-container\">\n// //                 <div className=\"chart-container\">\n// //                     {chartData ? (\n// //                         <div style={{ position: 'relative', height: '500px' }}>\n// //                              <Chart type='line' data={chartData} options={chartOptions} />\n// //                         </div>\n// //                     ) : ( <div>Preparing chart...</div> )}\n// //                 </div>\n\n// //                 <div className=\"side-panel\">\n// //                     {/* AI Analysis Card */}\n// //                     <div className=\"ai-summary-container\">\n// //                         <h3 className=\"ai-summary-header\">\n// //                             <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px', verticalAlign: 'bottom' }}>\n// //                                 <path d=\"M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM12 14C8.13401 14 5 17.134 5 21H19C19 17.134 15.866 14 12 14Z\" />\n// //                             </svg>\n// //                             AI Analysis\n// //                         </h3>\n// //                         {isAiLoading ? (\n// //                             <p>Generating analysis...</p>\n// //                         ) : (\n// //                             <p className=\"ai-summary-text\">{aiSummary}</p>\n// //                         )}\n// //                     </div>\n\n// //                     {/* Related News Card */}\n// //                     <div className=\"news-container\">\n// //                         <h3 onClick={toggleNews} className=\"news-header\">\n// //                             Related News <span>{isNewsExpanded ? '▲' : '▼'}</span>\n// //                         </h3>\n// //                         {isNewsExpanded && (\n// //                             <div className=\"news-list\">\n// //                                 {news.length > 0 ? (\n// //                                     news.map((item, index) => (\n// //                                         <div key={index} className=\"news-item\">\n// //                                             <div className=\"news-content\">\n// //                                                 <h4>{item.title}</h4>\n// //                                                 <p>{item.summary}</p>\n// //                                             </div>\n// //                                             <span className=\"news-date\">{new Date(item.date).toLocaleDateString()}</span>\n// //                                         </div>\n// //                                     ))\n// //                                 ) : ( <p>No related news available.</p> )}\n// //                             </div>\n// //                         )}\n// //                     </div>\n// //                 </div>\n// //             </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default StockDetails;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n// import { Chart } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n//   Title, Tooltip, Legend, TimeScale\n// } from 'chart.js';\n// import 'chartjs-adapter-date-fns';\n\n// ChartJS.register(\n//   CategoryScale, LinearScale, PointElement, LineElement,\n//   Title, Tooltip, Legend, TimeScale\n// );\n// const modelColors = [\n//     'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',\n// ];\n// const chartOptions = {\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     plugins: {\n//         legend: { position: 'top', labels: { color: 'white' } },\n//         title: { display: true, text: `Price Trends and Model Predictions`, color: 'white' }\n//     },\n//     scales: {\n//         x: {\n//             type: 'time',\n//             time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n//             title: { display: true, text: 'Date', color: 'white' },\n//             ticks: { color: 'white' },\n//             grid: { color: 'rgba(255, 255, 255, 0.1)' }\n//         },\n//         y: {\n//             title: { display: true, text: 'Price', color: 'white' },\n//             ticks: { color: 'white' },\n//             grid: { color: 'rgba(255, 255, 255, 0.1)' }\n//         }\n//     }\n// };\n\n// function StockDetails() {\n//     const { ticker } = useParams();\n//     // Component State\n//     const [chartData, setChartData] = useState(null);\n//     const [news, setNews] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [isNewsExpanded, setIsNewsExpanded] = useState(true); // <-- 设置为默认展开\n\n//     // State for the AI analysis feature\n//     const [historicalData, setHistoricalData] = useState(null);\n//     const [aiSummary, setAiSummary] = useState('');\n//     const [isAiLoading, setIsAiLoading] = useState(true);\n\n//     const toggleNews = () => setIsNewsExpanded(!isNewsExpanded);\n\n//     // useEffect Hook: Fetches main stock data (history, predictions, news)\n//     useEffect(() => {\n//         async function fetchStockData() {\n//             setLoading(true);\n//             setError(null);\n//             try {\n//                 const response = await fetch(`/api/stocks/${ticker}`);\n//                 const result = await response.json(); \n//                 if (!response.ok) {\n//                     throw new Error(result.error || `Server error: ${response.status}`);\n//                 }\n//                 const historyDataset = {\n//                     label: 'Close Price',\n//                     data: result.history.map(item => ({ x: item.date, y: item.close })),\n//                     borderColor: 'rgb(75, 192, 192)',\n//                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n//                     tension: 0.1\n//                 };\n//                 const predictionDatasets = Object.keys(result.predictions).map((modelName, index) => ({\n//                     label: `${modelName} Prediction`,\n//                     data: result.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n//                     borderColor: modelColors[index % modelColors.length],\n//                     backgroundColor: modelColors[index % modelColors.length],\n//                     showLine: false, pointRadius: 6, pointHoverRadius: 8,\n//                 }));\n//                 setChartData({ datasets: [historyDataset, ...predictionDatasets] });\n//                 setNews(result.news || []);\n//                 setHistoricalData(result.history); \n//             } catch (err) {\n//                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n//                 setError(err.message); \n//             } finally {\n//                 setLoading(false);\n//             }\n//         }\n//         fetchStockData();\n//     }, [ticker]);\n\n//     // useEffect Hook: Fetches the AI summary\n//     useEffect(() => {\n//         if (!historicalData || historicalData.length === 0) return;\n//         async function fetchAiSummary() {\n//             setIsAiLoading(true);\n//             try {\n//                 const response = await fetch('/api/summarize', {\n//                     method: 'POST',\n//                     headers: { 'Content-Type': 'application/json' },\n//                     body: JSON.stringify({ historicalData, ticker })\n//                 });\n//                 const result = await response.json();\n//                 if (!response.ok) {\n//                     throw new Error(result.error || 'Failed to get AI summary.');\n//                 }\n//                 setAiSummary(result.summary);\n//             } catch (err) {\n//                 console.error(\"AI summary fetch error:\", err);\n//                 setAiSummary('Could not load AI analysis summary.');\n//             } finally {\n//                 setIsAiLoading(false);\n//             }\n//         }\n//         fetchAiSummary();\n//     }, [historicalData, ticker]);\n\n//     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n//     if (error) {\n//         return (\n//             <div className=\"error-container\">\n//                 <div className=\"error-icon\">⚠️</div>\n//                 <h2>Could not load stock data</h2>\n//                 <p className=\"error-message\">{error}</p>\n//                 <Link to=\"/\" className=\"home-button\">Back to Home</Link>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"stock-details-page-container\">\n//             <h2 className=\"stock-details-subtitle\">\n//                 {ticker} Historical Prices and Model Predictions\n//             </h2>\n\n//             {/* === 容器1: 图表和AI摘要 (双列布局) === */}\n//             <div className=\"details-container\">\n//                 <div className=\"chart-container\">\n//                     {chartData ? (\n//                         <div style={{ position: 'relative', height: '500px' }}>\n//                              <Chart type='line' data={chartData} options={chartOptions} />\n//                         </div>\n//                     ) : ( <div>Preparing chart...</div> )}\n//                 </div>\n\n//                 <div className=\"side-panel\">\n//                     {/* AI Analysis Card - 现在是侧边栏唯一的内容 */}\n//                     <div className=\"ai-summary-container\">\n//                         <h3 className=\"ai-summary-header\">\n//                             <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px', verticalAlign: 'bottom' }}>\n//                                 <path d=\"M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM12 14C8.13401 14 5 17.134 5 21H19C19 17.134 15.866 14 12 14Z\" />\n//                             </svg>\n//                             AI Analysis\n//                         </h3>\n//                         {isAiLoading ? (\n//                             <p>Generating analysis...</p>\n//                         ) : (\n//                             <p className=\"ai-summary-text\">{aiSummary}</p>\n//                         )}\n//                     </div>\n//                     {/* 新闻部分已从这里移除 */}\n//                 </div>\n//             </div>\n\n//             {/* === 容器2: 相关新闻 (单列，在下方) === */}\n//             <div className=\"news-section-container\"> {/* <-- 新增的包裹容器 */}\n//                 <div className=\"news-container\">\n//                     <h3 onClick={toggleNews} className=\"news-header\">\n//                         Related News <span>{isNewsExpanded ? '▲' : '▼'}</span>\n//                     </h3>\n//                     {isNewsExpanded && (\n//                         <div className=\"news-list\">\n//                             {news.length > 0 ? (\n//                                 news.map((item, index) => (\n//                                     <div key={index} className=\"news-item\">\n//                                         <div className=\"news-content\">\n//                                             <h4>{item.title}</h4>\n//                                             <p>{item.summary}</p>\n//                                         </div>\n//                                         <span className=\"news-date\">{new Date(item.date).toLocaleDateString()}</span>\n//                                     </div>\n//                                 ))\n//                             ) : ( <p>No related news available.</p> )}\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default StockDetails;\n\n// filename: StockDetails.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Chart } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\n// --- Chart.js Registration and Options (No Changes) ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst modelColors = ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'];\nconst chartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      position: 'top',\n      labels: {\n        color: 'white'\n      }\n    },\n    title: {\n      display: true,\n      text: `Price Trends and Model Predictions`,\n      color: 'white'\n    }\n  },\n  scales: {\n    x: {\n      type: 'time',\n      time: {\n        unit: 'day',\n        tooltipFormat: 'yyyy-MM-dd'\n      },\n      title: {\n        display: true,\n        text: 'Date',\n        color: 'white'\n      },\n      ticks: {\n        color: 'white'\n      },\n      grid: {\n        color: 'rgba(255, 255, 255, 0.1)'\n      }\n    },\n    y: {\n      title: {\n        display: true,\n        text: 'Price',\n        color: 'white'\n      },\n      ticks: {\n        color: 'white'\n      },\n      grid: {\n        color: 'rgba(255, 255, 255, 0.1)'\n      }\n    }\n  }\n};\n\n// ==================================================================\n// ===     CORE CHANGE: NEW COMPONENT TO RENDER AI REPORT         ===\n// ==================================================================\n/**\n * A component that parses a Markdown-like string from the AI and renders it as styled HTML.\n * It handles headers (####), bold text (**), and list items (-).\n */\nconst AIAnalysisReport = ({\n  summary\n}) => {\n  const renderLine = (line, index) => {\n    // Handle Headers (e.g., #### 1. Core Trend Analysis)\n    if (line.startsWith('####')) {\n      // Remove '####' and trim whitespace\n      const headerText = line.replace(/^#+\\s*/, '');\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"ai-report-header\",\n        dangerouslySetInnerHTML: {\n          __html: renderBold(headerText)\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 20\n      }, this);\n    }\n    // Handle List Items (e.g., - **Overall Trend**:)\n    if (line.startsWith('- ')) {\n      const listItemText = line.substring(2);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        dangerouslySetInnerHTML: {\n          __html: renderBold(listItemText)\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 20\n      }, this);\n    }\n    // Handle empty lines by adding some vertical space\n    if (line.trim() === '') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '10px'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 20\n      }, this);\n    }\n    // Handle any other text as a paragraph\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: renderBold(line)\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 16\n    }, this);\n  };\n\n  // Helper function to replace **text** with <strong>text</strong>\n  const renderBold = text => {\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n  };\n  const lines = summary.split('\\n');\n  const reportElements = lines.map(renderLine);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ai-report-content\",\n    children: reportElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 486,\n    columnNumber: 12\n  }, this);\n};\n_c = AIAnalysisReport;\nfunction StockDetails() {\n  _s();\n  const {\n    ticker\n  } = useParams();\n  // --- State Management (No Changes) ---\n  const [chartData, setChartData] = useState(null);\n  const [news, setNews] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isNewsExpanded, setIsNewsExpanded] = useState(true);\n  const [historicalData, setHistoricalData] = useState(null);\n  const [aiSummary, setAiSummary] = useState('');\n  const [isAiLoading, setIsAiLoading] = useState(true);\n  const toggleNews = () => setIsNewsExpanded(!isNewsExpanded);\n\n  // --- Data Fetching useEffect Hooks (No Changes) ---\n  useEffect(() => {\n    async function fetchStockData() {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`/api/stocks/${ticker}`);\n        const result = await response.json();\n        if (!response.ok) {\n          throw new Error(result.error || `Server error: ${response.status}`);\n        }\n        const historyDataset = {\n          label: 'Close Price',\n          data: result.history.map(item => ({\n            x: item.date,\n            y: item.close\n          })),\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.5)',\n          tension: 0.1\n        };\n        const predictionDatasets = Object.keys(result.predictions).map((modelName, index) => ({\n          label: `${modelName} Prediction`,\n          data: result.predictions[modelName].map(p => ({\n            x: p.date,\n            y: p.price\n          })),\n          borderColor: modelColors[index % modelColors.length],\n          backgroundColor: modelColors[index % modelColors.length],\n          showLine: false,\n          pointRadius: 6,\n          pointHoverRadius: 8\n        }));\n        setChartData({\n          datasets: [historyDataset, ...predictionDatasets]\n        });\n        setNews(result.news || []);\n        setHistoricalData(result.history);\n      } catch (err) {\n        console.error(`Failed to fetch stock details for ${ticker}:`, err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchStockData();\n  }, [ticker]);\n  useEffect(() => {\n    if (!historicalData || historicalData.length === 0) return;\n    async function fetchAiSummary() {\n      setIsAiLoading(true);\n      try {\n        const response = await fetch('/api/summarize', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            historicalData,\n            ticker\n          })\n        });\n        const result = await response.json();\n        if (!response.ok) {\n          throw new Error(result.error || 'Failed to get AI summary.');\n        }\n        setAiSummary(result.summary);\n      } catch (err) {\n        console.error(\"AI summary fetch error:\", err);\n        setAiSummary('Could not load AI analysis summary.');\n      } finally {\n        setIsAiLoading(false);\n      }\n    }\n    fetchAiSummary();\n  }, [historicalData, ticker]);\n\n  // --- Render Logic (Minor Changes) ---\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [\"Loading data for \", ticker, \"...\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 568,\n    columnNumber: 25\n  }, this);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-icon\",\n        children: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Could not load stock data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"home-button\",\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-details-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"stock-details-subtitle\",\n      children: [ticker, \" Historical Prices and Model Predictions\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'relative',\n            height: '500px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Chart, {\n            type: \"line\",\n            data: chartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Preparing chart...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-summary-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"ai-summary-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              width: \"24\",\n              height: \"24\",\n              viewBox: \"0 0 24 24\",\n              fill: \"currentColor\",\n              xmlns: \"http://www.w3.org/2000/svg\",\n              style: {\n                marginRight: '8px',\n                verticalAlign: 'bottom'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM12 14C8.13401 14 5 17.134 5 21H19C19 17.134 15.866 14 12 14Z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 29\n            }, this), \"AI Analysis\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 25\n          }, this), isAiLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Generating analysis...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 29\n          }, this) :\n          /*#__PURE__*/\n          // ==================================================================\n          // ===   CORE CHANGE: USE THE NEW REPORT RENDERER COMPONENT       ===\n          // ==================================================================\n          _jsxDEV(AIAnalysisReport, {\n            summary: aiSummary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-section-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"news-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          onClick: toggleNews,\n          className: \"news-header\",\n          children: [\"Related News \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: isNewsExpanded ? '▲' : '▼'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 21\n        }, this), isNewsExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"news-list\",\n          children: news.length > 0 ? news.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"news-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"news-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 626,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: item.summary\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"news-date\",\n              children: new Date(item.date).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No related news available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 581,\n    columnNumber: 9\n  }, this);\n}\n_s(StockDetails, \"4cDdXZpq55cjDPrMKBIw1TzLVGc=\", false, function () {\n  return [useParams];\n});\n_c2 = StockDetails;\nexport default StockDetails;\nvar _c, _c2;\n$RefreshReg$(_c, \"AIAnalysisReport\");\n$RefreshReg$(_c2, \"StockDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","jsxDEV","_jsxDEV","register","modelColors","chartOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","color","title","display","text","scales","x","type","time","unit","tooltipFormat","ticks","grid","y","AIAnalysisReport","summary","renderLine","line","index","startsWith","headerText","replace","className","dangerouslySetInnerHTML","__html","renderBold","fileName","_jsxFileName","lineNumber","columnNumber","listItemText","substring","trim","style","height","lines","split","reportElements","map","children","_c","StockDetails","_s","ticker","chartData","setChartData","news","setNews","error","setError","loading","setLoading","isNewsExpanded","setIsNewsExpanded","historicalData","setHistoricalData","aiSummary","setAiSummary","isAiLoading","setIsAiLoading","toggleNews","fetchStockData","response","fetch","result","json","ok","Error","status","historyDataset","label","data","history","item","date","close","borderColor","backgroundColor","tension","predictionDatasets","Object","keys","predictions","modelName","p","price","length","showLine","pointRadius","pointHoverRadius","datasets","err","console","message","fetchAiSummary","method","headers","body","JSON","stringify","textAlign","marginTop","to","options","width","viewBox","fill","xmlns","marginRight","verticalAlign","d","onClick","Date","toLocaleDateString","_c2","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js"],"sourcesContent":["\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams, Link } from 'react-router-dom'; \n// // import { Chart } from 'react-chartjs-2';\n// // import {\n// //   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale\n// // } from 'chart.js';\n// // import 'chartjs-adapter-date-fns';\n\n// // ChartJS.register(\n// //   CategoryScale, LinearScale, PointElement, LineElement,\n// //   Title, Tooltip, Legend, TimeScale\n// // );\n// // const modelColors = [\n// //     'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',\n// // ];\n// // const chartOptions = {\n// //     responsive: true,\n// //     maintainAspectRatio: false,\n// //     plugins: {\n// //         legend: { position: 'top', labels: { color: 'white' } },\n// //         title: { display: true, text: `Price Trends and Model Predictions`, color: 'white' }\n// //     },\n// //     scales: {\n// //         x: {\n// //             type: 'time',\n// //             time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n// //             title: { display: true, text: 'Date', color: 'white' },\n// //             ticks: { color: 'white' },\n// //             grid: { color: 'rgba(255, 255, 255, 0.1)' }\n// //         },\n// //         y: {\n// //             title: { display: true, text: 'Price', color: 'white' },\n// //             ticks: { color: 'white' },\n// //             grid: { color: 'rgba(255, 255, 255, 0.1)' }\n// //         }\n// //     }\n// // };\n\n// // function StockDetails() {\n// //     const { ticker } = useParams();\n// //     // Component State\n// //     const [chartData, setChartData] = useState(null);\n// //     const [news, setNews] = useState([]);\n// //     const [error, setError] = useState(null);\n// //     const [loading, setLoading] = useState(true);\n// //     const [isNewsExpanded, setIsNewsExpanded] = useState(false);\n\n// //     // State for the AI analysis feature\n// //     const [historicalData, setHistoricalData] = useState(null);\n// //     const [aiSummary, setAiSummary] = useState('');\n// //     const [isAiLoading, setIsAiLoading] = useState(true);\n\n// //     const toggleNews = () => setIsNewsExpanded(!isNewsExpanded);\n\n// //     // useEffect Hook: Fetches main stock data (history, predictions, news)\n// //     useEffect(() => {\n// //         // <-- Core Change: Use async/await for consistent style and improved error handling\n// //         async function fetchStockData() {\n// //             setLoading(true);\n// //             setError(null);\n// //             try {\n// //                 const response = await fetch(`/api/stocks/${ticker}`);\n// //                 // Always try to parse JSON, regardless of success\n// //                 const result = await response.json(); \n\n// //                 // If the HTTP response status is not OK (e.g., 404, 500), \n// //                 // throw the error message provided by the backend.\n// //                 if (!response.ok) {\n// //                     throw new Error(result.error || `Server error: ${response.status}`);\n// //                 }\n\n// //                 // --- Logic for successfully fetched data ---\n// //                 const historyDataset = {\n// //                     label: 'Close Price',\n// //                     data: result.history.map(item => ({ x: item.date, y: item.close })),\n// //                     borderColor: 'rgb(75, 192, 192)',\n// //                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// //                     tension: 0.1\n// //                 };\n// //                 const predictionDatasets = Object.keys(result.predictions).map((modelName, index) => ({\n// //                     label: `${modelName} Prediction`,\n// //                     data: result.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n// //                     borderColor: modelColors[index % modelColors.length],\n// //                     backgroundColor: modelColors[index % modelColors.length],\n// //                     showLine: false, pointRadius: 6, pointHoverRadius: 8,\n// //                 }));\n// //                 setChartData({ datasets: [historyDataset, ...predictionDatasets] });\n// //                 setNews(result.news || []);\n// //                 // Save historical data to trigger the AI analysis fetch\n// //                 setHistoricalData(result.history); \n\n// //             } catch (err) {\n// //                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n// //                 // Set the captured, more specific message to the error state\n// //                 setError(err.message); \n// //             } finally {\n// //                 setLoading(false);\n// //             }\n// //         }\n        \n// //         fetchStockData();\n// //     }, [ticker]);\n\n// //     // useEffect Hook: Fetches the AI summary (this logic is solid and needs no major changes)\n// //     useEffect(() => {\n// //         if (!historicalData || historicalData.length === 0) return;\n\n// //         async function fetchAiSummary() {\n// //             setIsAiLoading(true);\n// //             try {\n// //                 const response = await fetch('/api/summarize', {\n// //                     method: 'POST',\n// //                     headers: { 'Content-Type': 'application/json' },\n// //                     body: JSON.stringify({ historicalData, ticker })\n// //                 });\n// //                 const result = await response.json();\n// //                 if (!response.ok) {\n// //                     throw new Error(result.error || 'Failed to get AI summary.');\n// //                 }\n// //                 setAiSummary(result.summary);\n// //             } catch (err) {\n// //                 console.error(\"AI summary fetch error:\", err);\n// //                 setAiSummary('Could not load AI analysis summary.');\n// //             } finally {\n// //                 setIsAiLoading(false);\n// //             }\n// //         }\n// //         fetchAiSummary();\n// //     }, [historicalData, ticker]);\n\n// //     // --- Render Logic ---\n// //     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n\n// //     // <-- Core Change: Use the new, more user-friendly error display component\n// //     if (error) {\n// //         return (\n// //             <div className=\"error-container\">\n// //                 <div className=\"error-icon\">⚠️</div>\n// //                 <h2>Could not load stock data</h2>\n// //                 <p className=\"error-message\">{error}</p>\n// //                 <Link to=\"/\" className=\"home-button\">\n// //                     Back to Home\n// //                 </Link>\n// //             </div>\n// //         );\n// //     }\n\n// //     // Render logic for when data is successfully fetched\n// //     return (\n// //         <div className=\"stock-details-page-container\">\n// //             <h2 className=\"stock-details-subtitle\">\n// //                 {ticker} Historical Prices and Model Predictions\n// //             </h2>\n            \n// //             <div className=\"details-container\">\n// //                 <div className=\"chart-container\">\n// //                     {chartData ? (\n// //                         <div style={{ position: 'relative', height: '500px' }}>\n// //                              <Chart type='line' data={chartData} options={chartOptions} />\n// //                         </div>\n// //                     ) : ( <div>Preparing chart...</div> )}\n// //                 </div>\n                \n// //                 <div className=\"side-panel\">\n// //                     {/* AI Analysis Card */}\n// //                     <div className=\"ai-summary-container\">\n// //                         <h3 className=\"ai-summary-header\">\n// //                             <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px', verticalAlign: 'bottom' }}>\n// //                                 <path d=\"M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM12 14C8.13401 14 5 17.134 5 21H19C19 17.134 15.866 14 12 14Z\" />\n// //                             </svg>\n// //                             AI Analysis\n// //                         </h3>\n// //                         {isAiLoading ? (\n// //                             <p>Generating analysis...</p>\n// //                         ) : (\n// //                             <p className=\"ai-summary-text\">{aiSummary}</p>\n// //                         )}\n// //                     </div>\n\n// //                     {/* Related News Card */}\n// //                     <div className=\"news-container\">\n// //                         <h3 onClick={toggleNews} className=\"news-header\">\n// //                             Related News <span>{isNewsExpanded ? '▲' : '▼'}</span>\n// //                         </h3>\n// //                         {isNewsExpanded && (\n// //                             <div className=\"news-list\">\n// //                                 {news.length > 0 ? (\n// //                                     news.map((item, index) => (\n// //                                         <div key={index} className=\"news-item\">\n// //                                             <div className=\"news-content\">\n// //                                                 <h4>{item.title}</h4>\n// //                                                 <p>{item.summary}</p>\n// //                                             </div>\n// //                                             <span className=\"news-date\">{new Date(item.date).toLocaleDateString()}</span>\n// //                                         </div>\n// //                                     ))\n// //                                 ) : ( <p>No related news available.</p> )}\n// //                             </div>\n// //                         )}\n// //                     </div>\n// //                 </div>\n// //             </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default StockDetails;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n// import { Chart } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n//   Title, Tooltip, Legend, TimeScale\n// } from 'chart.js';\n// import 'chartjs-adapter-date-fns';\n\n// ChartJS.register(\n//   CategoryScale, LinearScale, PointElement, LineElement,\n//   Title, Tooltip, Legend, TimeScale\n// );\n// const modelColors = [\n//     'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',\n// ];\n// const chartOptions = {\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     plugins: {\n//         legend: { position: 'top', labels: { color: 'white' } },\n//         title: { display: true, text: `Price Trends and Model Predictions`, color: 'white' }\n//     },\n//     scales: {\n//         x: {\n//             type: 'time',\n//             time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n//             title: { display: true, text: 'Date', color: 'white' },\n//             ticks: { color: 'white' },\n//             grid: { color: 'rgba(255, 255, 255, 0.1)' }\n//         },\n//         y: {\n//             title: { display: true, text: 'Price', color: 'white' },\n//             ticks: { color: 'white' },\n//             grid: { color: 'rgba(255, 255, 255, 0.1)' }\n//         }\n//     }\n// };\n\n// function StockDetails() {\n//     const { ticker } = useParams();\n//     // Component State\n//     const [chartData, setChartData] = useState(null);\n//     const [news, setNews] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [isNewsExpanded, setIsNewsExpanded] = useState(true); // <-- 设置为默认展开\n\n//     // State for the AI analysis feature\n//     const [historicalData, setHistoricalData] = useState(null);\n//     const [aiSummary, setAiSummary] = useState('');\n//     const [isAiLoading, setIsAiLoading] = useState(true);\n\n//     const toggleNews = () => setIsNewsExpanded(!isNewsExpanded);\n\n//     // useEffect Hook: Fetches main stock data (history, predictions, news)\n//     useEffect(() => {\n//         async function fetchStockData() {\n//             setLoading(true);\n//             setError(null);\n//             try {\n//                 const response = await fetch(`/api/stocks/${ticker}`);\n//                 const result = await response.json(); \n//                 if (!response.ok) {\n//                     throw new Error(result.error || `Server error: ${response.status}`);\n//                 }\n//                 const historyDataset = {\n//                     label: 'Close Price',\n//                     data: result.history.map(item => ({ x: item.date, y: item.close })),\n//                     borderColor: 'rgb(75, 192, 192)',\n//                     backgroundColor: 'rgba(75, 192, 192, 0.5)',\n//                     tension: 0.1\n//                 };\n//                 const predictionDatasets = Object.keys(result.predictions).map((modelName, index) => ({\n//                     label: `${modelName} Prediction`,\n//                     data: result.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n//                     borderColor: modelColors[index % modelColors.length],\n//                     backgroundColor: modelColors[index % modelColors.length],\n//                     showLine: false, pointRadius: 6, pointHoverRadius: 8,\n//                 }));\n//                 setChartData({ datasets: [historyDataset, ...predictionDatasets] });\n//                 setNews(result.news || []);\n//                 setHistoricalData(result.history); \n//             } catch (err) {\n//                 console.error(`Failed to fetch stock details for ${ticker}:`, err);\n//                 setError(err.message); \n//             } finally {\n//                 setLoading(false);\n//             }\n//         }\n//         fetchStockData();\n//     }, [ticker]);\n\n//     // useEffect Hook: Fetches the AI summary\n//     useEffect(() => {\n//         if (!historicalData || historicalData.length === 0) return;\n//         async function fetchAiSummary() {\n//             setIsAiLoading(true);\n//             try {\n//                 const response = await fetch('/api/summarize', {\n//                     method: 'POST',\n//                     headers: { 'Content-Type': 'application/json' },\n//                     body: JSON.stringify({ historicalData, ticker })\n//                 });\n//                 const result = await response.json();\n//                 if (!response.ok) {\n//                     throw new Error(result.error || 'Failed to get AI summary.');\n//                 }\n//                 setAiSummary(result.summary);\n//             } catch (err) {\n//                 console.error(\"AI summary fetch error:\", err);\n//                 setAiSummary('Could not load AI analysis summary.');\n//             } finally {\n//                 setIsAiLoading(false);\n//             }\n//         }\n//         fetchAiSummary();\n//     }, [historicalData, ticker]);\n\n//     if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n//     if (error) {\n//         return (\n//             <div className=\"error-container\">\n//                 <div className=\"error-icon\">⚠️</div>\n//                 <h2>Could not load stock data</h2>\n//                 <p className=\"error-message\">{error}</p>\n//                 <Link to=\"/\" className=\"home-button\">Back to Home</Link>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"stock-details-page-container\">\n//             <h2 className=\"stock-details-subtitle\">\n//                 {ticker} Historical Prices and Model Predictions\n//             </h2>\n            \n//             {/* === 容器1: 图表和AI摘要 (双列布局) === */}\n//             <div className=\"details-container\">\n//                 <div className=\"chart-container\">\n//                     {chartData ? (\n//                         <div style={{ position: 'relative', height: '500px' }}>\n//                              <Chart type='line' data={chartData} options={chartOptions} />\n//                         </div>\n//                     ) : ( <div>Preparing chart...</div> )}\n//                 </div>\n                \n//                 <div className=\"side-panel\">\n//                     {/* AI Analysis Card - 现在是侧边栏唯一的内容 */}\n//                     <div className=\"ai-summary-container\">\n//                         <h3 className=\"ai-summary-header\">\n//                             <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px', verticalAlign: 'bottom' }}>\n//                                 <path d=\"M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM12 14C8.13401 14 5 17.134 5 21H19C19 17.134 15.866 14 12 14Z\" />\n//                             </svg>\n//                             AI Analysis\n//                         </h3>\n//                         {isAiLoading ? (\n//                             <p>Generating analysis...</p>\n//                         ) : (\n//                             <p className=\"ai-summary-text\">{aiSummary}</p>\n//                         )}\n//                     </div>\n//                     {/* 新闻部分已从这里移除 */}\n//                 </div>\n//             </div>\n\n//             {/* === 容器2: 相关新闻 (单列，在下方) === */}\n//             <div className=\"news-section-container\"> {/* <-- 新增的包裹容器 */}\n//                 <div className=\"news-container\">\n//                     <h3 onClick={toggleNews} className=\"news-header\">\n//                         Related News <span>{isNewsExpanded ? '▲' : '▼'}</span>\n//                     </h3>\n//                     {isNewsExpanded && (\n//                         <div className=\"news-list\">\n//                             {news.length > 0 ? (\n//                                 news.map((item, index) => (\n//                                     <div key={index} className=\"news-item\">\n//                                         <div className=\"news-content\">\n//                                             <h4>{item.title}</h4>\n//                                             <p>{item.summary}</p>\n//                                         </div>\n//                                         <span className=\"news-date\">{new Date(item.date).toLocaleDateString()}</span>\n//                                     </div>\n//                                 ))\n//                             ) : ( <p>No related news available.</p> )}\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default StockDetails;\n\n\n\n// filename: StockDetails.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Chart } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement,\n  Title, Tooltip, Legend, TimeScale\n} from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\n// --- Chart.js Registration and Options (No Changes) ---\nChartJS.register(\n  CategoryScale, LinearScale, PointElement, LineElement,\n  Title, Tooltip, Legend, TimeScale\n);\nconst modelColors = [\n    'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',\n];\nconst chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n        legend: { position: 'top', labels: { color: 'white' } },\n        title: { display: true, text: `Price Trends and Model Predictions`, color: 'white' }\n    },\n    scales: {\n        x: {\n            type: 'time',\n            time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },\n            title: { display: true, text: 'Date', color: 'white' },\n            ticks: { color: 'white' },\n            grid: { color: 'rgba(255, 255, 255, 0.1)' }\n        },\n        y: {\n            title: { display: true, text: 'Price', color: 'white' },\n            ticks: { color: 'white' },\n            grid: { color: 'rgba(255, 255, 255, 0.1)' }\n        }\n    }\n};\n\n// ==================================================================\n// ===     CORE CHANGE: NEW COMPONENT TO RENDER AI REPORT         ===\n// ==================================================================\n/**\n * A component that parses a Markdown-like string from the AI and renders it as styled HTML.\n * It handles headers (####), bold text (**), and list items (-).\n */\nconst AIAnalysisReport = ({ summary }) => {\n    const renderLine = (line, index) => {\n        // Handle Headers (e.g., #### 1. Core Trend Analysis)\n        if (line.startsWith('####')) {\n            // Remove '####' and trim whitespace\n            const headerText = line.replace(/^#+\\s*/, '');\n            return <h4 key={index} className=\"ai-report-header\" dangerouslySetInnerHTML={{ __html: renderBold(headerText) }} />;\n        }\n        // Handle List Items (e.g., - **Overall Trend**:)\n        if (line.startsWith('- ')) {\n            const listItemText = line.substring(2);\n            return <li key={index} dangerouslySetInnerHTML={{ __html: renderBold(listItemText) }} />;\n        }\n        // Handle empty lines by adding some vertical space\n        if (line.trim() === '') {\n            return <div key={index} style={{ height: '10px' }} />;\n        }\n        // Handle any other text as a paragraph\n        return <p key={index} dangerouslySetInnerHTML={{ __html: renderBold(line) }} />;\n    };\n\n    // Helper function to replace **text** with <strong>text</strong>\n    const renderBold = (text) => {\n        return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n    };\n\n    const lines = summary.split('\\n');\n    const reportElements = lines.map(renderLine);\n\n    return <div className=\"ai-report-content\">{reportElements}</div>;\n};\n\n\nfunction StockDetails() {\n    const { ticker } = useParams();\n    // --- State Management (No Changes) ---\n    const [chartData, setChartData] = useState(null);\n    const [news, setNews] = useState([]);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [isNewsExpanded, setIsNewsExpanded] = useState(true);\n    const [historicalData, setHistoricalData] = useState(null);\n    const [aiSummary, setAiSummary] = useState('');\n    const [isAiLoading, setIsAiLoading] = useState(true);\n\n    const toggleNews = () => setIsNewsExpanded(!isNewsExpanded);\n\n    // --- Data Fetching useEffect Hooks (No Changes) ---\n    useEffect(() => {\n        async function fetchStockData() {\n            setLoading(true);\n            setError(null);\n            try {\n                const response = await fetch(`/api/stocks/${ticker}`);\n                const result = await response.json(); \n                if (!response.ok) {\n                    throw new Error(result.error || `Server error: ${response.status}`);\n                }\n                const historyDataset = {\n                    label: 'Close Price',\n                    data: result.history.map(item => ({ x: item.date, y: item.close })),\n                    borderColor: 'rgb(75, 192, 192)',\n                    backgroundColor: 'rgba(75, 192, 192, 0.5)',\n                    tension: 0.1\n                };\n                const predictionDatasets = Object.keys(result.predictions).map((modelName, index) => ({\n                    label: `${modelName} Prediction`,\n                    data: result.predictions[modelName].map(p => ({ x: p.date, y: p.price })),\n                    borderColor: modelColors[index % modelColors.length],\n                    backgroundColor: modelColors[index % modelColors.length],\n                    showLine: false, pointRadius: 6, pointHoverRadius: 8,\n                }));\n                setChartData({ datasets: [historyDataset, ...predictionDatasets] });\n                setNews(result.news || []);\n                setHistoricalData(result.history); \n            } catch (err) {\n                console.error(`Failed to fetch stock details for ${ticker}:`, err);\n                setError(err.message); \n            } finally {\n                setLoading(false);\n            }\n        }\n        fetchStockData();\n    }, [ticker]);\n\n    useEffect(() => {\n        if (!historicalData || historicalData.length === 0) return;\n        async function fetchAiSummary() {\n            setIsAiLoading(true);\n            try {\n                const response = await fetch('/api/summarize', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ historicalData, ticker })\n                });\n                const result = await response.json();\n                if (!response.ok) {\n                    throw new Error(result.error || 'Failed to get AI summary.');\n                }\n                setAiSummary(result.summary);\n            } catch (err) {\n                console.error(\"AI summary fetch error:\", err);\n                setAiSummary('Could not load AI analysis summary.');\n            } finally {\n                setIsAiLoading(false);\n            }\n        }\n        fetchAiSummary();\n    }, [historicalData, ticker]);\n\n    // --- Render Logic (Minor Changes) ---\n    if (loading) return <div style={{ textAlign: 'center', marginTop: '50px' }}>Loading data for {ticker}...</div>;\n    if (error) {\n        return (\n            <div className=\"error-container\">\n                <div className=\"error-icon\">⚠️</div>\n                <h2>Could not load stock data</h2>\n                <p className=\"error-message\">{error}</p>\n                <Link to=\"/\" className=\"home-button\">Back to Home</Link>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"stock-details-page-container\">\n            <h2 className=\"stock-details-subtitle\">\n                {ticker} Historical Prices and Model Predictions\n            </h2>\n            \n            <div className=\"details-container\">\n                <div className=\"chart-container\">\n                    {chartData ? (\n                        <div style={{ position: 'relative', height: '500px' }}>\n                             <Chart type='line' data={chartData} options={chartOptions} />\n                        </div>\n                    ) : ( <div>Preparing chart...</div> )}\n                </div>\n                \n                <div className=\"side-panel\">\n                    <div className=\"ai-summary-container\">\n                        <h3 className=\"ai-summary-header\">\n                            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px', verticalAlign: 'bottom' }}>\n                                <path d=\"M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM12 14C8.13401 14 5 17.134 5 21H19C19 17.134 15.866 14 12 14Z\" />\n                            </svg>\n                            AI Analysis\n                        </h3>\n                        {isAiLoading ? (\n                            <p>Generating analysis...</p>\n                        ) : (\n                            // ==================================================================\n                            // ===   CORE CHANGE: USE THE NEW REPORT RENDERER COMPONENT       ===\n                            // ==================================================================\n                            <AIAnalysisReport summary={aiSummary} />\n                        )}\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"news-section-container\">\n                <div className=\"news-container\">\n                    <h3 onClick={toggleNews} className=\"news-header\">\n                        Related News <span>{isNewsExpanded ? '▲' : '▼'}</span>\n                    </h3>\n                    {isNewsExpanded && (\n                        <div className=\"news-list\">\n                            {news.length > 0 ? (\n                                news.map((item, index) => (\n                                    <div key={index} className=\"news-item\">\n                                        <div className=\"news-content\">\n                                            <h4>{item.title}</h4>\n                                            <p>{item.summary}</p>\n                                        </div>\n                                        <span className=\"news-date\">{new Date(item.date).toLocaleDateString()}</span>\n                                    </div>\n                                ))\n                            ) : ( <p>No related news available.</p> )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default StockDetails;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}