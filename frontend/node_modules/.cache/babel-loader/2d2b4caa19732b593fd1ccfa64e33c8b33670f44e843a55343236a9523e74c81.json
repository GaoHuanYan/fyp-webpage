{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/StockList.js\",\n  _s = $RefreshSig$();\n// // // StockList.js \n\n// // import React, { useState, useEffect } from 'react';\n// // import { Link, useNavigate } from 'react-router-dom';\n\n// // function StockList() {\n// //   const [stocks, setStocks] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [searchTerm, setSearchTerm] = useState('');\n// //   const navigate = useNavigate();\n\n// //   useEffect(() => {\n// //     fetch('/api/stocks')\n// //       .then(res => res.json())\n// //       .then(data => {\n// //         setStocks(data);\n// //         setLoading(false);\n// //       })\n// //       .catch(error => {\n// //         console.error(\"Failed to fetch stock list:\", error);\n// //         setLoading(false);\n// //       });\n// //   }, []);\n\n// //   const handleSearch = () => {\n// //     if (searchTerm.trim()) {\n// //       // Ensure the path is /stock/\n// //       navigate(`/stock/${searchTerm.trim().toUpperCase()}`);\n// //     }\n// //   };\n\n// //   const handleKeyPress = (event) => {\n// //     if (event.key === 'Enter') {\n// //       handleSearch();\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return <div>Loading stock list...</div>;\n// //   }\n\n// //   return (\n// //     <div style={{ textAlign: 'center' }}>\n// //       <div style={{ margin: '20px 0' }}>\n// //         <h2>Search for a Stock</h2>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter stock ticker (e.g., TSLA)\"\n// //           value={searchTerm}\n// //           onChange={(e) => setSearchTerm(e.target.value)}\n// //           onKeyPress={handleKeyPress}\n// //           style={{ padding: '10px', fontSize: '16px', width: '250px', borderRadius: '5px', border: '1px solid #ccc' }}\n// //         />\n// //         <button \n// //           onClick={handleSearch}\n// //           style={{ padding: '10px 20px', fontSize: '16px', marginLeft: '10px', cursor: 'pointer', borderRadius: '5px' }}\n// //         >\n// //           Search\n// //         </button>\n// //       </div>\n// //       <hr style={{width: '50%', margin: '30px auto'}} />\n// //       <h2>Or select a stock below</h2>\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\n// //         {stocks.map(stock => (\n// //           <li key={stock.ticker} style={{ margin: '15px 0' }}>\n// //             {/* Ensure the path is also /stock/ here */}\n// //             <Link \n// //               to={`/stock/${stock.ticker}`} \n// //               style={{ \n// //                 color: '#61dafb', \n// //                 fontSize: '18px', \n// //                 textDecoration: 'none',\n// //                 padding: '10px 20px',\n// //                 border: '1px solid #61dafb',\n// //                 borderRadius: '5px',\n// //                 display: 'inline-block',\n// //                 width: '200px'\n// //               }}\n// //             >\n// //               {stock.ticker}\n// //             </Link>\n// //           </li>\n// //         ))}\n// //       </ul>\n// //     </div>\n// //   );\n// // }\n\n// // export default StockList;\n\n// // src/components/StockList.js\n\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import HangSengChart from './HangSengChart'; // <-- 1. 导入新的图表组件\n\n// // 注意：我们已经移除了 useNavigate, useState for searchTerm, handleSearch, 和 handleKeyPress\n// // 因为这些逻辑现在由 App.js 处理\n\n// function StockList() {\n//   const [stocks, setStocks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetch('/api/stocks')\n//       .then(res => res.json())\n//       .then(data => {\n//         setStocks(data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error(\"Failed to fetch stock list:\", error);\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading stock list...</div>;\n//   }\n\n//   // 2. 移除了整个搜索框的 JSX\n//   return (\n//     <div className=\"stock-list-container\">\n//       {/* 3. 在列表上方添加恒生指数图表 */}\n//       <HangSengChart />\n\n//       <hr />\n\n//       <h2>Or select a stock below</h2>\n//       <ul>\n//         {stocks.map(stock => (\n//           <li key={stock.ticker}>\n//             <Link to={`/stock/${stock.ticker}`}>\n//               {stock.ticker}\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default StockList;\n// src/components/StockList.js\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport HangSengChart from './HangSengChart';\n\n// 1. 新增一个辅助函数来随机打乱数组 (Fisher-Yates Shuffle 算法)\n// 这是一个非常标准且高效的随机排序方法\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  let currentIndex = array.length,\n    randomIndex;\n\n  // 当还剩下元素可以打乱时...\n  while (currentIndex !== 0) {\n    // 随机挑选一个剩下的元素...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // 并与当前元素交换\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n  return array;\n};\nfunction StockList() {\n  _s();\n  const [stocks, setStocks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch('/api/stocks').then(res => res.json()).then(data => {\n      // 2. 在获取到数据后，调用这个函数来打乱完整的股票列表\n      const shuffledStocks = shuffleArray(data);\n\n      // 3. 从打乱后的数组中取出前三项\n      const randomThreeStocks = shuffledStocks.slice(0, 3);\n\n      // 4. 将这随机的三项设置到 state 中，而不是整个列表\n      setStocks(randomThreeStocks);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Failed to fetch stock list:\", error);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    // 为了更好的用户体验，可以稍微修改加载文本\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading featured stocks...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(HangSengChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Or select a featured stock below\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: stocks.map(stock => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/stock/${stock.ticker}`,\n          children: stock.ticker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)\n      }, stock.ticker, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(StockList, \"hy/W5lhb9YPUw5x5OrbyRvdgQgk=\");\n_c = StockList;\nexport default StockList;\nvar _c;\n$RefreshReg$(_c, \"StockList\");","map":{"version":3,"names":["React","useState","useEffect","Link","HangSengChart","jsxDEV","_jsxDEV","shuffleArray","array","currentIndex","length","randomIndex","Math","floor","random","StockList","_s","stocks","setStocks","loading","setLoading","fetch","then","res","json","data","shuffledStocks","randomThreeStocks","slice","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","stock","to","ticker","_c","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/StockList.js"],"sourcesContent":["// // // StockList.js \n\n// // import React, { useState, useEffect } from 'react';\n// // import { Link, useNavigate } from 'react-router-dom';\n\n// // function StockList() {\n// //   const [stocks, setStocks] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [searchTerm, setSearchTerm] = useState('');\n// //   const navigate = useNavigate();\n\n// //   useEffect(() => {\n// //     fetch('/api/stocks')\n// //       .then(res => res.json())\n// //       .then(data => {\n// //         setStocks(data);\n// //         setLoading(false);\n// //       })\n// //       .catch(error => {\n// //         console.error(\"Failed to fetch stock list:\", error);\n// //         setLoading(false);\n// //       });\n// //   }, []);\n\n// //   const handleSearch = () => {\n// //     if (searchTerm.trim()) {\n// //       // Ensure the path is /stock/\n// //       navigate(`/stock/${searchTerm.trim().toUpperCase()}`);\n// //     }\n// //   };\n\n// //   const handleKeyPress = (event) => {\n// //     if (event.key === 'Enter') {\n// //       handleSearch();\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return <div>Loading stock list...</div>;\n// //   }\n\n// //   return (\n// //     <div style={{ textAlign: 'center' }}>\n// //       <div style={{ margin: '20px 0' }}>\n// //         <h2>Search for a Stock</h2>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter stock ticker (e.g., TSLA)\"\n// //           value={searchTerm}\n// //           onChange={(e) => setSearchTerm(e.target.value)}\n// //           onKeyPress={handleKeyPress}\n// //           style={{ padding: '10px', fontSize: '16px', width: '250px', borderRadius: '5px', border: '1px solid #ccc' }}\n// //         />\n// //         <button \n// //           onClick={handleSearch}\n// //           style={{ padding: '10px 20px', fontSize: '16px', marginLeft: '10px', cursor: 'pointer', borderRadius: '5px' }}\n// //         >\n// //           Search\n// //         </button>\n// //       </div>\n// //       <hr style={{width: '50%', margin: '30px auto'}} />\n// //       <h2>Or select a stock below</h2>\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\n// //         {stocks.map(stock => (\n// //           <li key={stock.ticker} style={{ margin: '15px 0' }}>\n// //             {/* Ensure the path is also /stock/ here */}\n// //             <Link \n// //               to={`/stock/${stock.ticker}`} \n// //               style={{ \n// //                 color: '#61dafb', \n// //                 fontSize: '18px', \n// //                 textDecoration: 'none',\n// //                 padding: '10px 20px',\n// //                 border: '1px solid #61dafb',\n// //                 borderRadius: '5px',\n// //                 display: 'inline-block',\n// //                 width: '200px'\n// //               }}\n// //             >\n// //               {stock.ticker}\n// //             </Link>\n// //           </li>\n// //         ))}\n// //       </ul>\n// //     </div>\n// //   );\n// // }\n\n// // export default StockList;\n\n// // src/components/StockList.js\n\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import HangSengChart from './HangSengChart'; // <-- 1. 导入新的图表组件\n\n// // 注意：我们已经移除了 useNavigate, useState for searchTerm, handleSearch, 和 handleKeyPress\n// // 因为这些逻辑现在由 App.js 处理\n\n// function StockList() {\n//   const [stocks, setStocks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetch('/api/stocks')\n//       .then(res => res.json())\n//       .then(data => {\n//         setStocks(data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error(\"Failed to fetch stock list:\", error);\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading stock list...</div>;\n//   }\n\n//   // 2. 移除了整个搜索框的 JSX\n//   return (\n//     <div className=\"stock-list-container\">\n//       {/* 3. 在列表上方添加恒生指数图表 */}\n//       <HangSengChart />\n      \n//       <hr />\n      \n//       <h2>Or select a stock below</h2>\n//       <ul>\n//         {stocks.map(stock => (\n//           <li key={stock.ticker}>\n//             <Link to={`/stock/${stock.ticker}`}>\n//               {stock.ticker}\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default StockList;\n// src/components/StockList.js\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport HangSengChart from './HangSengChart';\n\n// 1. 新增一个辅助函数来随机打乱数组 (Fisher-Yates Shuffle 算法)\n// 这是一个非常标准且高效的随机排序方法\nconst shuffleArray = (array) => {\n  let currentIndex = array.length, randomIndex;\n\n  // 当还剩下元素可以打乱时...\n  while (currentIndex !== 0) {\n    // 随机挑选一个剩下的元素...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // 并与当前元素交换\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n};\n\nfunction StockList() {\n  const [stocks, setStocks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('/api/stocks')\n      .then(res => res.json())\n      .then(data => {\n        // 2. 在获取到数据后，调用这个函数来打乱完整的股票列表\n        const shuffledStocks = shuffleArray(data);\n        \n        // 3. 从打乱后的数组中取出前三项\n        const randomThreeStocks = shuffledStocks.slice(0, 3);\n        \n        // 4. 将这随机的三项设置到 state 中，而不是整个列表\n        setStocks(randomThreeStocks);\n        \n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Failed to fetch stock list:\", error);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    // 为了更好的用户体验，可以稍微修改加载文本\n    return <div>Loading featured stocks...</div>;\n  }\n\n  return (\n    <div className=\"stock-list-container\">\n      <HangSengChart />\n      \n      <hr />\n      \n      {/* 标题也可以相应修改，更具引导性 */}\n      <h2>Or select a featured stock below</h2>\n      \n      {/* 这部分 JSX 代码完全不需要改变，因为它会自动渲染 state 中的内容 */}\n      <ul>\n        {stocks.map(stock => (\n          <li key={stock.ticker}>\n            <Link to={`/stock/${stock.ticker}`}>\n              {stock.ticker}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default StockList;"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,aAAa,MAAM,iBAAiB;;AAE3C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC9B,IAAIC,YAAY,GAAGD,KAAK,CAACE,MAAM;IAAEC,WAAW;;EAE5C;EACA,OAAOF,YAAY,KAAK,CAAC,EAAE;IACzB;IACAE,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,YAAY,CAAC;IACtDA,YAAY,EAAE;;IAEd;IACA,CAACD,KAAK,CAACC,YAAY,CAAC,EAAED,KAAK,CAACG,WAAW,CAAC,CAAC,GAAG,CAC1CH,KAAK,CAACG,WAAW,CAAC,EAAEH,KAAK,CAACC,YAAY,CAAC,CAAC;EAC5C;EAEA,OAAOD,KAAK;AACd,CAAC;AAED,SAASO,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdmB,KAAK,CAAC,aAAa,CAAC,CACjBC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACZ;MACA,MAAMC,cAAc,GAAGnB,YAAY,CAACkB,IAAI,CAAC;;MAEzC;MACA,MAAME,iBAAiB,GAAGD,cAAc,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;MAEpD;MACAV,SAAS,CAACS,iBAAiB,CAAC;MAE5BP,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDS,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDV,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE;IACX;IACA,oBAAOb,OAAA;MAAA0B,QAAA,EAAK;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9C;EAEA,oBACE9B,OAAA;IAAK+B,SAAS,EAAC,sBAAsB;IAAAL,QAAA,gBACnC1B,OAAA,CAACF,aAAa;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEjB9B,OAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAGN9B,OAAA;MAAA0B,QAAA,EAAI;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzC9B,OAAA;MAAA0B,QAAA,EACGf,MAAM,CAACqB,GAAG,CAACC,KAAK,iBACfjC,OAAA;QAAA0B,QAAA,eACE1B,OAAA,CAACH,IAAI;UAACqC,EAAE,EAAE,UAAUD,KAAK,CAACE,MAAM,EAAG;UAAAT,QAAA,EAChCO,KAAK,CAACE;QAAM;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT;MAAC,GAHAG,KAAK,CAACE,MAAM;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIjB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACpB,EAAA,CAnDQD,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AAqDlB,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}