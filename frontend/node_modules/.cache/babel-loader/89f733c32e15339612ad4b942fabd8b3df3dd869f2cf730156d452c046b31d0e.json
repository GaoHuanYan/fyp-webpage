{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Line } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from 'chart.js';\n\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// function StockDetails() {\n//   const { ticker } = useParams();\n//   const [stockData, setStockData] = useState(null);\n//   const [news, setNews] = useState(null);\n//   const [prediction, setPrediction] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const [detailsRes, newsRes, predictionRes] = await Promise.all([\n//           fetch(`/api/stocks/${ticker}`),\n//           fetch(`/api/stocks/${ticker}/news`),\n//           fetch(`/api/predict/${ticker}`),\n//         ]);\n\n//         if (!detailsRes.ok || !newsRes.ok || !predictionRes.ok) {\n//           throw new Error('获取数据失败');\n//         }\n\n//         const detailsData = await detailsRes.json();\n//         const newsData = await newsRes.json();\n//         const predictionData = await predictionRes.json();\n\n//         setStockData(detailsData);\n//         setNews(newsData);\n//         setPrediction(predictionData);\n//       } catch (err) {\n//         setError(err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [ticker]);\n\n//   if (loading) return <div className=\"loading\">正在加载股票数据...</div>;\n//   if (error) return <div className=\"error\">错误: {error}</div>;\n//   if (!stockData) return null;\n\n//   const chartData = {\n//     labels: stockData.map(data => data.date),\n//     datasets: [\n//       {\n//         label: `${ticker} 收盘价`,\n//         data: stockData.map(data => data.close),\n//         borderColor: 'rgb(75, 192, 192)',\n//         backgroundColor: 'rgba(75, 192, 192, 0.5)',\n//       },\n//     ],\n//   };\n\n//   const chartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         position: 'top',\n//       },\n//       title: {\n//         display: true,\n//         text: `${ticker} 股价走势`,\n//       },\n//       tooltip: {\n//         callbacks: {\n//           label: function (context) {\n//             const index = context.dataIndex;\n//             const dataPoint = stockData[index];\n//             if (!dataPoint) return '';\n//             return [\n//               `收盘: ${dataPoint.close.toFixed(2)}`,\n//               `开盘: ${dataPoint.open.toFixed(2)}`,\n//               `最高: ${dataPoint.high.toFixed(2)}`,\n//               `最低: ${dataPoint.low.toFixed(2)}`,\n//             ];\n//           },\n//         },\n//       },\n//     },\n//   };\n\n//   return (\n//     <div className=\"stock-details-container\">\n//       <h2>{ticker} - 股票详情</h2>\n\n//       <section className=\"chart-prediction-section\">\n//         <div className=\"chart-container\">\n//           <Line options={chartOptions} data={chartData} />\n//         </div>\n\n//         {prediction && (\n//           <div className=\"prediction-container\">\n//             <h3>模型预测明日收盘价</h3>\n//             <p className=\"prediction-price\">${prediction.predicted_close}</p>\n//             <small>（基于简单线性回归模型）</small>\n//           </div>\n//         )}\n//       </section>\n\n//       <section className=\"news-section\">\n//         {news && (\n//           <>\n//             <div className=\"news-list-container\">\n//               <h3>最新资讯</h3>\n//               {news.news_items.map(item => (\n//                 <div key={item.id} className=\"news-item\">\n//                   <p className=\"news-title\">{item.title}</p>\n//                   <p className=\"news-date\">{item.date}</p>\n//                   <p className=\"news-summary\">{item.summary}</p>\n//                 </div>\n//               ))}\n//             </div>\n//             <div className=\"news-summary-container\">\n//               <h3>近期资讯总结</h3>\n//               <p>{news.summary}</p>\n//             </div>\n//           </>\n//         )}\n//       </section>\n//     </div>\n//   );\n// }\n\n// export default StockDetails;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StockDetails() {\n  _s();\n  const {\n    ticker\n  } = useParams();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 只请求后端存在的唯一数据接口 /api/stocks/<ticker>\n    fetch(`/api/stocks/${ticker}`).then(res => {\n      if (!res.ok) {\n        // 如果服务器返回了错误状态 (如 404, 500), 先抛出错误\n        throw new Error(`服务器错误: ${res.status}`);\n      }\n      return res.json();\n    }).then(fetchedData => {\n      // 检查后端返回的数据里是否包含我们自定义的错误信息\n      if (fetchedData.error) {\n        throw new Error(fetchedData.error);\n      }\n      setData(fetchedData);\n      setLoading(false);\n    }).catch(err => {\n      // 捕获所有类型的错误 (网络错误, 解析错误, 后端返回的错误)\n      console.error(`获取股票详情失败 (${ticker}):`, err);\n      setError(`获取数据失败: ${err.message}`);\n      setLoading(false);\n    });\n  }, [ticker]); // 每当 ticker 变化时，重新获取数据\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u6B63\\u5728\\u4E3A \", ticker, \" \\u52A0\\u8F7D\\u6570\\u636E...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u9519\\u8BEF: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 12\n    }, this);\n  }\n  if (!data || !data.history) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u6CA1\\u6709\\u627E\\u5230 \", ticker, \" \\u7684\\u5386\\u53F2\\u6570\\u636E\\u3002\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '90%',\n      height: '500px',\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [data.name, \" (\", data.ticker, \") \\u5386\\u53F2\\u4EF7\\u683C (1\\u5E74)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data.history,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          domain: ['auto', 'auto']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Close\",\n          stroke: \"#8884d8\",\n          name: \"\\u6536\\u76D8\\u4EF7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n_s(StockDetails, \"iG9FKdEqZKXVFXi13LIPHf8A03Q=\", false, function () {\n  return [useParams];\n});\n_c = StockDetails;\nexport default StockDetails;\nvar _c;\n$RefreshReg$(_c, \"StockDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","StockDetails","_s","ticker","data","setData","error","setError","loading","setLoading","fetch","then","res","ok","Error","status","json","fetchedData","catch","err","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","history","style","width","height","margin","name","top","right","left","bottom","strokeDasharray","dataKey","domain","type","stroke","_c","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Line } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from 'chart.js';\n\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// function StockDetails() {\n//   const { ticker } = useParams();\n//   const [stockData, setStockData] = useState(null);\n//   const [news, setNews] = useState(null);\n//   const [prediction, setPrediction] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const [detailsRes, newsRes, predictionRes] = await Promise.all([\n//           fetch(`/api/stocks/${ticker}`),\n//           fetch(`/api/stocks/${ticker}/news`),\n//           fetch(`/api/predict/${ticker}`),\n//         ]);\n\n//         if (!detailsRes.ok || !newsRes.ok || !predictionRes.ok) {\n//           throw new Error('获取数据失败');\n//         }\n\n//         const detailsData = await detailsRes.json();\n//         const newsData = await newsRes.json();\n//         const predictionData = await predictionRes.json();\n\n//         setStockData(detailsData);\n//         setNews(newsData);\n//         setPrediction(predictionData);\n//       } catch (err) {\n//         setError(err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [ticker]);\n\n//   if (loading) return <div className=\"loading\">正在加载股票数据...</div>;\n//   if (error) return <div className=\"error\">错误: {error}</div>;\n//   if (!stockData) return null;\n\n//   const chartData = {\n//     labels: stockData.map(data => data.date),\n//     datasets: [\n//       {\n//         label: `${ticker} 收盘价`,\n//         data: stockData.map(data => data.close),\n//         borderColor: 'rgb(75, 192, 192)',\n//         backgroundColor: 'rgba(75, 192, 192, 0.5)',\n//       },\n//     ],\n//   };\n\n//   const chartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         position: 'top',\n//       },\n//       title: {\n//         display: true,\n//         text: `${ticker} 股价走势`,\n//       },\n//       tooltip: {\n//         callbacks: {\n//           label: function (context) {\n//             const index = context.dataIndex;\n//             const dataPoint = stockData[index];\n//             if (!dataPoint) return '';\n//             return [\n//               `收盘: ${dataPoint.close.toFixed(2)}`,\n//               `开盘: ${dataPoint.open.toFixed(2)}`,\n//               `最高: ${dataPoint.high.toFixed(2)}`,\n//               `最低: ${dataPoint.low.toFixed(2)}`,\n//             ];\n//           },\n//         },\n//       },\n//     },\n//   };\n\n//   return (\n//     <div className=\"stock-details-container\">\n//       <h2>{ticker} - 股票详情</h2>\n      \n//       <section className=\"chart-prediction-section\">\n//         <div className=\"chart-container\">\n//           <Line options={chartOptions} data={chartData} />\n//         </div>\n        \n//         {prediction && (\n//           <div className=\"prediction-container\">\n//             <h3>模型预测明日收盘价</h3>\n//             <p className=\"prediction-price\">${prediction.predicted_close}</p>\n//             <small>（基于简单线性回归模型）</small>\n//           </div>\n//         )}\n//       </section>\n\n//       <section className=\"news-section\">\n//         {news && (\n//           <>\n//             <div className=\"news-list-container\">\n//               <h3>最新资讯</h3>\n//               {news.news_items.map(item => (\n//                 <div key={item.id} className=\"news-item\">\n//                   <p className=\"news-title\">{item.title}</p>\n//                   <p className=\"news-date\">{item.date}</p>\n//                   <p className=\"news-summary\">{item.summary}</p>\n//                 </div>\n//               ))}\n//             </div>\n//             <div className=\"news-summary-container\">\n//               <h3>近期资讯总结</h3>\n//               <p>{news.summary}</p>\n//             </div>\n//           </>\n//         )}\n//       </section>\n//     </div>\n//   );\n// }\n\n// export default StockDetails;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nfunction StockDetails() {\n  const { ticker } = useParams();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 只请求后端存在的唯一数据接口 /api/stocks/<ticker>\n    fetch(`/api/stocks/${ticker}`)\n      .then(res => {\n        if (!res.ok) {\n          // 如果服务器返回了错误状态 (如 404, 500), 先抛出错误\n          throw new Error(`服务器错误: ${res.status}`);\n        }\n        return res.json();\n      })\n      .then(fetchedData => {\n        // 检查后端返回的数据里是否包含我们自定义的错误信息\n        if (fetchedData.error) {\n          throw new Error(fetchedData.error);\n        }\n        setData(fetchedData);\n        setLoading(false);\n      })\n      .catch(err => {\n        // 捕获所有类型的错误 (网络错误, 解析错误, 后端返回的错误)\n        console.error(`获取股票详情失败 (${ticker}):`, err);\n        setError(`获取数据失败: ${err.message}`);\n        setLoading(false);\n      });\n  }, [ticker]); // 每当 ticker 变化时，重新获取数据\n\n  if (loading) {\n    return <div>正在为 {ticker} 加载数据...</div>;\n  }\n\n  if (error) {\n    return <div>错误: {error}</div>;\n  }\n\n  if (!data || !data.history) {\n    return <div>没有找到 {ticker} 的历史数据。</div>;\n  }\n\n  return (\n    <div style={{ width: '90%', height: '500px', margin: 'auto' }}>\n      <h2>{data.name} ({data.ticker}) 历史价格 (1年)</h2>\n      <ResponsiveContainer>\n        <LineChart\n          data={data.history}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"Date\" />\n          <YAxis domain={['auto', 'auto']} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" name=\"收盘价\" />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default StockDetails;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9G,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAO,CAAC,GAAGb,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAqB,KAAK,CAAC,eAAeP,MAAM,EAAE,CAAC,CAC3BQ,IAAI,CAACC,GAAG,IAAI;MACX,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;QACX;QACA,MAAM,IAAIC,KAAK,CAAC,UAAUF,GAAG,CAACG,MAAM,EAAE,CAAC;MACzC;MACA,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CACDL,IAAI,CAACM,WAAW,IAAI;MACnB;MACA,IAAIA,WAAW,CAACX,KAAK,EAAE;QACrB,MAAM,IAAIQ,KAAK,CAACG,WAAW,CAACX,KAAK,CAAC;MACpC;MACAD,OAAO,CAACY,WAAW,CAAC;MACpBR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDS,KAAK,CAACC,GAAG,IAAI;MACZ;MACAC,OAAO,CAACd,KAAK,CAAC,aAAaH,MAAM,IAAI,EAAEgB,GAAG,CAAC;MAC3CZ,QAAQ,CAAC,WAAWY,GAAG,CAACE,OAAO,EAAE,CAAC;MAClCZ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,IAAIK,OAAO,EAAE;IACX,oBAAOR,OAAA;MAAAsB,QAAA,GAAK,qBAAI,EAACnB,MAAM,EAAC,8BAAQ;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,IAAIpB,KAAK,EAAE;IACT,oBAAON,OAAA;MAAAsB,QAAA,GAAK,gBAAI,EAAChB,KAAK;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC/B;EAEA,IAAI,CAACtB,IAAI,IAAI,CAACA,IAAI,CAACuB,OAAO,EAAE;IAC1B,oBAAO3B,OAAA;MAAAsB,QAAA,GAAK,2BAAK,EAACnB,MAAM,EAAC,uCAAO;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,oBACE1B,OAAA;IAAK4B,KAAK,EAAE;MAAEC,KAAK,EAAE,KAAK;MAAEC,MAAM,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAT,QAAA,gBAC5DtB,OAAA;MAAAsB,QAAA,GAAKlB,IAAI,CAAC4B,IAAI,EAAC,IAAE,EAAC5B,IAAI,CAACD,MAAM,EAAC,sCAAW;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9C1B,OAAA,CAACF,mBAAmB;MAAAwB,QAAA,eAClBtB,OAAA,CAACT,SAAS;QACRa,IAAI,EAAEA,IAAI,CAACuB,OAAQ;QACnBI,MAAM,EAAE;UAAEE,GAAG,EAAE,CAAC;UAAEC,KAAK,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAE,CAAE;QAAAd,QAAA,gBAEnDtB,OAAA,CAACL,aAAa;UAAC0C,eAAe,EAAC;QAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvC1B,OAAA,CAACP,KAAK;UAAC6C,OAAO,EAAC;QAAM;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxB1B,OAAA,CAACN,KAAK;UAAC6C,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM;QAAE;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACnC1B,OAAA,CAACJ,OAAO;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACX1B,OAAA,CAACH,MAAM;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACV1B,OAAA,CAACR,IAAI;UAACgD,IAAI,EAAC,UAAU;UAACF,OAAO,EAAC,OAAO;UAACG,MAAM,EAAC,SAAS;UAACT,IAAI,EAAC;QAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV;AAACxB,EAAA,CA9DQD,YAAY;EAAA,QACAX,SAAS;AAAA;AAAAoD,EAAA,GADrBzC,YAAY;AAgErB,eAAeA,YAAY;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}