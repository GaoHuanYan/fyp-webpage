{"ast":null,"code":"var _jsxFileName = \"/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { Line } from 'react-chartjs-2';\n// // import {\n// //   Chart as ChartJS,\n// //   CategoryScale,\n// //   LinearScale,\n// //   PointElement,\n// //   LineElement,\n// //   Title,\n// //   Tooltip,\n// //   Legend,\n// // } from 'chart.js';\n\n// // ChartJS.register(\n// //   CategoryScale,\n// //   LinearScale,\n// //   PointElement,\n// //   LineElement,\n// //   Title,\n// //   Tooltip,\n// //   Legend\n// // );\n\n// // function StockDetails() {\n// //   const { ticker } = useParams();\n// //   const [stockData, setStockData] = useState(null);\n// //   const [news, setNews] = useState(null);\n// //   const [prediction, setPrediction] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       setLoading(true);\n// //       setError(null);\n// //       try {\n// //         const [detailsRes, newsRes, predictionRes] = await Promise.all([\n// //           fetch(`/api/stocks/${ticker}`),\n// //           fetch(`/api/stocks/${ticker}/news`),\n// //           fetch(`/api/predict/${ticker}`),\n// //         ]);\n\n// //         if (!detailsRes.ok || !newsRes.ok || !predictionRes.ok) {\n// //           throw new Error('获取数据失败');\n// //         }\n\n// //         const detailsData = await detailsRes.json();\n// //         const newsData = await newsRes.json();\n// //         const predictionData = await predictionRes.json();\n\n// //         setStockData(detailsData);\n// //         setNews(newsData);\n// //         setPrediction(predictionData);\n// //       } catch (err) {\n// //         setError(err.message);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, [ticker]);\n\n// //   if (loading) return <div className=\"loading\">正在加载股票数据...</div>;\n// //   if (error) return <div className=\"error\">错误: {error}</div>;\n// //   if (!stockData) return null;\n\n// //   const chartData = {\n// //     labels: stockData.map(data => data.date),\n// //     datasets: [\n// //       {\n// //         label: `${ticker} 收盘价`,\n// //         data: stockData.map(data => data.close),\n// //         borderColor: 'rgb(75, 192, 192)',\n// //         backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// //       },\n// //     ],\n// //   };\n\n// //   const chartOptions = {\n// //     responsive: true,\n// //     plugins: {\n// //       legend: {\n// //         position: 'top',\n// //       },\n// //       title: {\n// //         display: true,\n// //         text: `${ticker} 股价走势`,\n// //       },\n// //       tooltip: {\n// //         callbacks: {\n// //           label: function (context) {\n// //             const index = context.dataIndex;\n// //             const dataPoint = stockData[index];\n// //             if (!dataPoint) return '';\n// //             return [\n// //               `收盘: ${dataPoint.close.toFixed(2)}`,\n// //               `开盘: ${dataPoint.open.toFixed(2)}`,\n// //               `最高: ${dataPoint.high.toFixed(2)}`,\n// //               `最低: ${dataPoint.low.toFixed(2)}`,\n// //             ];\n// //           },\n// //         },\n// //       },\n// //     },\n// //   };\n\n// //   return (\n// //     <div className=\"stock-details-container\">\n// //       <h2>{ticker} - 股票详情</h2>\n\n// //       <section className=\"chart-prediction-section\">\n// //         <div className=\"chart-container\">\n// //           <Line options={chartOptions} data={chartData} />\n// //         </div>\n\n// //         {prediction && (\n// //           <div className=\"prediction-container\">\n// //             <h3>模型预测明日收盘价</h3>\n// //             <p className=\"prediction-price\">${prediction.predicted_close}</p>\n// //             <small>（基于简单线性回归模型）</small>\n// //           </div>\n// //         )}\n// //       </section>\n\n// //       <section className=\"news-section\">\n// //         {news && (\n// //           <>\n// //             <div className=\"news-list-container\">\n// //               <h3>最新资讯</h3>\n// //               {news.news_items.map(item => (\n// //                 <div key={item.id} className=\"news-item\">\n// //                   <p className=\"news-title\">{item.title}</p>\n// //                   <p className=\"news-date\">{item.date}</p>\n// //                   <p className=\"news-summary\">{item.summary}</p>\n// //                 </div>\n// //               ))}\n// //             </div>\n// //             <div className=\"news-summary-container\">\n// //               <h3>近期资讯总结</h3>\n// //               <p>{news.summary}</p>\n// //             </div>\n// //           </>\n// //         )}\n// //       </section>\n// //     </div>\n// //   );\n// // }\n\n// // export default StockDetails;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// function StockDetails() {\n//   const { ticker } = useParams();\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     // 只请求后端存在的唯一数据接口 /api/stocks/<ticker>\n//     fetch(`/api/stocks/${ticker}`)\n//       .then(res => {\n//         if (!res.ok) {\n//           // 如果服务器返回了错误状态 (如 404, 500), 先抛出错误\n//           throw new Error(`服务器错误: ${res.status}`);\n//         }\n//         return res.json();\n//       })\n//       .then(fetchedData => {\n//         // 检查后端返回的数据里是否包含我们自定义的错误信息\n//         if (fetchedData.error) {\n//           throw new Error(fetchedData.error);\n//         }\n//         setData(fetchedData);\n//         setLoading(false);\n//       })\n//       .catch(err => {\n//         // 捕获所有类型的错误 (网络错误, 解析错误, 后端返回的错误)\n//         console.error(`获取股票详情失败 (${ticker}):`, err);\n//         setError(`获取数据失败: ${err.message}`);\n//         setLoading(false);\n//       });\n//   }, [ticker]); // 每当 ticker 变化时，重新获取数据\n\n//   if (loading) {\n//     return <div>正在为 {ticker} 加载数据...</div>;\n//   }\n\n//   if (error) {\n//     return <div>错误: {error}</div>;\n//   }\n\n//   if (!data || !data.history) {\n//     return <div>没有找到 {ticker} 的历史数据。</div>;\n//   }\n\n//   return (\n//     <div style={{ width: '90%', height: '500px', margin: 'auto' }}>\n//       <h2>{data.name} ({data.ticker}) 历史价格 (1年)</h2>\n//       <ResponsiveContainer>\n//         <LineChart\n//           data={data.history}\n//           margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n//         >\n//           <CartesianGrid strokeDasharray=\"3 3\" />\n//           <XAxis dataKey=\"Date\" />\n//           <YAxis domain={['auto', 'auto']} />\n//           <Tooltip />\n//           <Legend />\n//           <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" name=\"收盘价\" />\n//         </LineChart>\n//       </ResponsiveContainer>\n//     </div>\n//   );\n// }\n\n// export default StockDetails;\n\n// frontend/src/components/StockDetails.js (最终版)\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\n// 1. 引入 Chart.js 的必要组件，这是标准做法\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// 2. 注册这些组件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction StockDetails() {\n  _s();\n  const {\n    ticker\n  } = useParams();\n  const [stockData, setStockData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 3. 新增一个专门用于图表的状态\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/stocks/${ticker}`).then(response => {\n      if (!response.ok) {\n        throw new Error(`服务器错误: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      if (data.error) {\n        throw new Error(data.error);\n      }\n      setStockData(data);\n\n      // 4. --- 这是核心改动：转换数据 ---\n      // 确认我们有历史数据\n      if (data.history && data.history.length > 0) {\n        // 准备图表数据\n        const newChartData = {\n          labels: data.history.map(item => item.date),\n          // X轴：所有日期\n          datasets: [{\n            label: '收盘价',\n            // 图例标签\n            data: data.history.map(item => item.close),\n            // Y轴：所有收盘价\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        };\n        setChartData(newChartData); // 设置格式化好的图表数据\n      }\n    }).catch(err => {\n      console.error(`获取股票详情失败 (${ticker}):`, err);\n      setError(`获取数据失败: ${err.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [ticker]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u6B63\\u5728\\u52A0\\u8F7D \", ticker, \" \\u7684\\u6570\\u636E...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u9519\\u8BEF: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 16\n    }, this);\n  }\n  if (!stockData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u6CA1\\u6709\\u627E\\u5230\\u8BE5\\u80A1\\u7968\\u7684\\u6570\\u636E\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [stockData.name, \" (\", stockData.ticker, \") \\u5386\\u53F2\\u4EF7\\u683C (1\\u5E74)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px dotted #ccc',\n        padding: '20px',\n        marginTop: '20px'\n      },\n      children: chartData ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: `${ticker} 过去一年价格走势`\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u6B63\\u5728\\u51C6\\u5907\\u56FE\\u8868...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 9\n  }, this);\n}\n_s(StockDetails, \"R7QJhhjlaqVzn0f5T1okBPGqOkA=\", false, function () {\n  return [useParams];\n});\n_c = StockDetails;\nexport default StockDetails;\nvar _c;\n$RefreshReg$(_c, \"StockDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","StockDetails","_s","ticker","stockData","setStockData","error","setError","loading","setLoading","chartData","setChartData","fetch","then","response","ok","Error","status","json","data","history","length","newChartData","labels","map","item","date","datasets","label","close","borderColor","tension","catch","err","console","message","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","name","style","border","padding","marginTop","options","responsive","plugins","legend","position","title","display","text","_c","$RefreshReg$"],"sources":["/Users/edig/Downloads/stockcode/frontend/src/components/StockDetails.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { Line } from 'react-chartjs-2';\n// // import {\n// //   Chart as ChartJS,\n// //   CategoryScale,\n// //   LinearScale,\n// //   PointElement,\n// //   LineElement,\n// //   Title,\n// //   Tooltip,\n// //   Legend,\n// // } from 'chart.js';\n\n// // ChartJS.register(\n// //   CategoryScale,\n// //   LinearScale,\n// //   PointElement,\n// //   LineElement,\n// //   Title,\n// //   Tooltip,\n// //   Legend\n// // );\n\n// // function StockDetails() {\n// //   const { ticker } = useParams();\n// //   const [stockData, setStockData] = useState(null);\n// //   const [news, setNews] = useState(null);\n// //   const [prediction, setPrediction] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       setLoading(true);\n// //       setError(null);\n// //       try {\n// //         const [detailsRes, newsRes, predictionRes] = await Promise.all([\n// //           fetch(`/api/stocks/${ticker}`),\n// //           fetch(`/api/stocks/${ticker}/news`),\n// //           fetch(`/api/predict/${ticker}`),\n// //         ]);\n\n// //         if (!detailsRes.ok || !newsRes.ok || !predictionRes.ok) {\n// //           throw new Error('获取数据失败');\n// //         }\n\n// //         const detailsData = await detailsRes.json();\n// //         const newsData = await newsRes.json();\n// //         const predictionData = await predictionRes.json();\n\n// //         setStockData(detailsData);\n// //         setNews(newsData);\n// //         setPrediction(predictionData);\n// //       } catch (err) {\n// //         setError(err.message);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, [ticker]);\n\n// //   if (loading) return <div className=\"loading\">正在加载股票数据...</div>;\n// //   if (error) return <div className=\"error\">错误: {error}</div>;\n// //   if (!stockData) return null;\n\n// //   const chartData = {\n// //     labels: stockData.map(data => data.date),\n// //     datasets: [\n// //       {\n// //         label: `${ticker} 收盘价`,\n// //         data: stockData.map(data => data.close),\n// //         borderColor: 'rgb(75, 192, 192)',\n// //         backgroundColor: 'rgba(75, 192, 192, 0.5)',\n// //       },\n// //     ],\n// //   };\n\n// //   const chartOptions = {\n// //     responsive: true,\n// //     plugins: {\n// //       legend: {\n// //         position: 'top',\n// //       },\n// //       title: {\n// //         display: true,\n// //         text: `${ticker} 股价走势`,\n// //       },\n// //       tooltip: {\n// //         callbacks: {\n// //           label: function (context) {\n// //             const index = context.dataIndex;\n// //             const dataPoint = stockData[index];\n// //             if (!dataPoint) return '';\n// //             return [\n// //               `收盘: ${dataPoint.close.toFixed(2)}`,\n// //               `开盘: ${dataPoint.open.toFixed(2)}`,\n// //               `最高: ${dataPoint.high.toFixed(2)}`,\n// //               `最低: ${dataPoint.low.toFixed(2)}`,\n// //             ];\n// //           },\n// //         },\n// //       },\n// //     },\n// //   };\n\n// //   return (\n// //     <div className=\"stock-details-container\">\n// //       <h2>{ticker} - 股票详情</h2>\n      \n// //       <section className=\"chart-prediction-section\">\n// //         <div className=\"chart-container\">\n// //           <Line options={chartOptions} data={chartData} />\n// //         </div>\n        \n// //         {prediction && (\n// //           <div className=\"prediction-container\">\n// //             <h3>模型预测明日收盘价</h3>\n// //             <p className=\"prediction-price\">${prediction.predicted_close}</p>\n// //             <small>（基于简单线性回归模型）</small>\n// //           </div>\n// //         )}\n// //       </section>\n\n// //       <section className=\"news-section\">\n// //         {news && (\n// //           <>\n// //             <div className=\"news-list-container\">\n// //               <h3>最新资讯</h3>\n// //               {news.news_items.map(item => (\n// //                 <div key={item.id} className=\"news-item\">\n// //                   <p className=\"news-title\">{item.title}</p>\n// //                   <p className=\"news-date\">{item.date}</p>\n// //                   <p className=\"news-summary\">{item.summary}</p>\n// //                 </div>\n// //               ))}\n// //             </div>\n// //             <div className=\"news-summary-container\">\n// //               <h3>近期资讯总结</h3>\n// //               <p>{news.summary}</p>\n// //             </div>\n// //           </>\n// //         )}\n// //       </section>\n// //     </div>\n// //   );\n// // }\n\n// // export default StockDetails;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// function StockDetails() {\n//   const { ticker } = useParams();\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     // 只请求后端存在的唯一数据接口 /api/stocks/<ticker>\n//     fetch(`/api/stocks/${ticker}`)\n//       .then(res => {\n//         if (!res.ok) {\n//           // 如果服务器返回了错误状态 (如 404, 500), 先抛出错误\n//           throw new Error(`服务器错误: ${res.status}`);\n//         }\n//         return res.json();\n//       })\n//       .then(fetchedData => {\n//         // 检查后端返回的数据里是否包含我们自定义的错误信息\n//         if (fetchedData.error) {\n//           throw new Error(fetchedData.error);\n//         }\n//         setData(fetchedData);\n//         setLoading(false);\n//       })\n//       .catch(err => {\n//         // 捕获所有类型的错误 (网络错误, 解析错误, 后端返回的错误)\n//         console.error(`获取股票详情失败 (${ticker}):`, err);\n//         setError(`获取数据失败: ${err.message}`);\n//         setLoading(false);\n//       });\n//   }, [ticker]); // 每当 ticker 变化时，重新获取数据\n\n//   if (loading) {\n//     return <div>正在为 {ticker} 加载数据...</div>;\n//   }\n\n//   if (error) {\n//     return <div>错误: {error}</div>;\n//   }\n\n//   if (!data || !data.history) {\n//     return <div>没有找到 {ticker} 的历史数据。</div>;\n//   }\n\n//   return (\n//     <div style={{ width: '90%', height: '500px', margin: 'auto' }}>\n//       <h2>{data.name} ({data.ticker}) 历史价格 (1年)</h2>\n//       <ResponsiveContainer>\n//         <LineChart\n//           data={data.history}\n//           margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n//         >\n//           <CartesianGrid strokeDasharray=\"3 3\" />\n//           <XAxis dataKey=\"Date\" />\n//           <YAxis domain={['auto', 'auto']} />\n//           <Tooltip />\n//           <Legend />\n//           <Line type=\"monotone\" dataKey=\"Close\" stroke=\"#8884d8\" name=\"收盘价\" />\n//         </LineChart>\n//       </ResponsiveContainer>\n//     </div>\n//   );\n// }\n\n// export default StockDetails;\n\n\n// frontend/src/components/StockDetails.js (最终版)\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\n// 1. 引入 Chart.js 的必要组件，这是标准做法\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\n// 2. 注册这些组件\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction StockDetails() {\n    const { ticker } = useParams();\n    const [stockData, setStockData] = useState(null);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n    \n    // 3. 新增一个专门用于图表的状态\n    const [chartData, setChartData] = useState(null);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`/api/stocks/${ticker}`)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`服务器错误: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                if (data.error) {\n                    throw new Error(data.error);\n                }\n                setStockData(data);\n\n                // 4. --- 这是核心改动：转换数据 ---\n                // 确认我们有历史数据\n                if (data.history && data.history.length > 0) {\n                    // 准备图表数据\n                    const newChartData = {\n                        labels: data.history.map(item => item.date), // X轴：所有日期\n                        datasets: [\n                            {\n                                label: '收盘价', // 图例标签\n                                data: data.history.map(item => item.close), // Y轴：所有收盘价\n                                borderColor: 'rgb(75, 192, 192)',\n                                tension: 0.1\n                            }\n                        ]\n                    };\n                    setChartData(newChartData); // 设置格式化好的图表数据\n                }\n            })\n            .catch(err => {\n                console.error(`获取股票详情失败 (${ticker}):`, err);\n                setError(`获取数据失败: ${err.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [ticker]);\n\n    if (loading) {\n        return <div>正在加载 {ticker} 的数据...</div>;\n    }\n\n    if (error) {\n        return <div>错误: {error}</div>;\n    }\n\n    if (!stockData) {\n        return <div>没有找到该股票的数据。</div>;\n    }\n\n    return (\n        <div>\n            <h2>{stockData.name} ({stockData.ticker}) 历史价格 (1年)</h2>\n            <div style={{ border: '1px dotted #ccc', padding: '20px', marginTop: '20px' }}>\n                {/* 5. 确保 chartData 准备好之后再渲染图表 */}\n                {chartData ? (\n                    <Line \n                        data={chartData} \n                        options={{\n                            responsive: true,\n                            plugins: {\n                                legend: {\n                                    position: 'top',\n                                },\n                                title: {\n                                    display: true,\n                                    text: `${ticker} 过去一年价格走势`\n                                }\n                            }\n                        }}\n                    />\n                ) : (\n                    <div>正在准备图表...</div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default StockDetails;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,IAAI,QAAQ,iBAAiB;AACtC;AACA,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}